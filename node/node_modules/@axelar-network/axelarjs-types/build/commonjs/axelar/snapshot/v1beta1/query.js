"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryValidatorsResponse_Validator = exports.QueryValidatorsResponse_TssIllegibilityInfo = exports.QueryValidatorsResponse = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "axelar.snapshot.v1beta1";
function createBaseQueryValidatorsResponse() {
    return { validators: [] };
}
exports.QueryValidatorsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.validators) {
            exports.QueryValidatorsResponse_Validator.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryValidatorsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.validators.push(exports.QueryValidatorsResponse_Validator.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            validators: Array.isArray(object?.validators)
                ? object.validators.map((e) => exports.QueryValidatorsResponse_Validator.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.validators) {
            obj.validators = message.validators.map((e) => e ? exports.QueryValidatorsResponse_Validator.toJSON(e) : undefined);
        }
        else {
            obj.validators = [];
        }
        return obj;
    },
    create(base) {
        return exports.QueryValidatorsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryValidatorsResponse();
        message.validators = object.validators?.map((e) => exports.QueryValidatorsResponse_Validator.fromPartial(e)) || [];
        return message;
    },
};
function createBaseQueryValidatorsResponse_TssIllegibilityInfo() {
    return {
        tombstoned: false,
        jailed: false,
        missedTooManyBlocks: false,
        noProxyRegistered: false,
        tssSuspended: false,
        proxyInsuficientFunds: false,
        staleTssHeartbeat: false,
    };
}
exports.QueryValidatorsResponse_TssIllegibilityInfo = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.tombstoned === true) {
            writer.uint32(8).bool(message.tombstoned);
        }
        if (message.jailed === true) {
            writer.uint32(16).bool(message.jailed);
        }
        if (message.missedTooManyBlocks === true) {
            writer.uint32(24).bool(message.missedTooManyBlocks);
        }
        if (message.noProxyRegistered === true) {
            writer.uint32(32).bool(message.noProxyRegistered);
        }
        if (message.tssSuspended === true) {
            writer.uint32(40).bool(message.tssSuspended);
        }
        if (message.proxyInsuficientFunds === true) {
            writer.uint32(48).bool(message.proxyInsuficientFunds);
        }
        if (message.staleTssHeartbeat === true) {
            writer.uint32(56).bool(message.staleTssHeartbeat);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryValidatorsResponse_TssIllegibilityInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.tombstoned = reader.bool();
                    break;
                case 2:
                    message.jailed = reader.bool();
                    break;
                case 3:
                    message.missedTooManyBlocks = reader.bool();
                    break;
                case 4:
                    message.noProxyRegistered = reader.bool();
                    break;
                case 5:
                    message.tssSuspended = reader.bool();
                    break;
                case 6:
                    message.proxyInsuficientFunds = reader.bool();
                    break;
                case 7:
                    message.staleTssHeartbeat = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            tombstoned: isSet(object.tombstoned) ? Boolean(object.tombstoned) : false,
            jailed: isSet(object.jailed) ? Boolean(object.jailed) : false,
            missedTooManyBlocks: isSet(object.missedTooManyBlocks) ? Boolean(object.missedTooManyBlocks) : false,
            noProxyRegistered: isSet(object.noProxyRegistered) ? Boolean(object.noProxyRegistered) : false,
            tssSuspended: isSet(object.tssSuspended) ? Boolean(object.tssSuspended) : false,
            proxyInsuficientFunds: isSet(object.proxyInsuficientFunds) ? Boolean(object.proxyInsuficientFunds) : false,
            staleTssHeartbeat: isSet(object.staleTssHeartbeat) ? Boolean(object.staleTssHeartbeat) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        message.tombstoned !== undefined && (obj.tombstoned = message.tombstoned);
        message.jailed !== undefined && (obj.jailed = message.jailed);
        message.missedTooManyBlocks !== undefined && (obj.missedTooManyBlocks = message.missedTooManyBlocks);
        message.noProxyRegistered !== undefined && (obj.noProxyRegistered = message.noProxyRegistered);
        message.tssSuspended !== undefined && (obj.tssSuspended = message.tssSuspended);
        message.proxyInsuficientFunds !== undefined && (obj.proxyInsuficientFunds = message.proxyInsuficientFunds);
        message.staleTssHeartbeat !== undefined && (obj.staleTssHeartbeat = message.staleTssHeartbeat);
        return obj;
    },
    create(base) {
        return exports.QueryValidatorsResponse_TssIllegibilityInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryValidatorsResponse_TssIllegibilityInfo();
        message.tombstoned = object.tombstoned ?? false;
        message.jailed = object.jailed ?? false;
        message.missedTooManyBlocks = object.missedTooManyBlocks ?? false;
        message.noProxyRegistered = object.noProxyRegistered ?? false;
        message.tssSuspended = object.tssSuspended ?? false;
        message.proxyInsuficientFunds = object.proxyInsuficientFunds ?? false;
        message.staleTssHeartbeat = object.staleTssHeartbeat ?? false;
        return message;
    },
};
function createBaseQueryValidatorsResponse_Validator() {
    return { operatorAddress: "", moniker: "", tssIllegibilityInfo: undefined };
}
exports.QueryValidatorsResponse_Validator = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.operatorAddress !== "") {
            writer.uint32(10).string(message.operatorAddress);
        }
        if (message.moniker !== "") {
            writer.uint32(18).string(message.moniker);
        }
        if (message.tssIllegibilityInfo !== undefined) {
            exports.QueryValidatorsResponse_TssIllegibilityInfo.encode(message.tssIllegibilityInfo, writer.uint32(26).fork())
                .ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryValidatorsResponse_Validator();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operatorAddress = reader.string();
                    break;
                case 2:
                    message.moniker = reader.string();
                    break;
                case 3:
                    message.tssIllegibilityInfo = exports.QueryValidatorsResponse_TssIllegibilityInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operatorAddress: isSet(object.operatorAddress) ? String(object.operatorAddress) : "",
            moniker: isSet(object.moniker) ? String(object.moniker) : "",
            tssIllegibilityInfo: isSet(object.tssIllegibilityInfo)
                ? exports.QueryValidatorsResponse_TssIllegibilityInfo.fromJSON(object.tssIllegibilityInfo)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.operatorAddress !== undefined && (obj.operatorAddress = message.operatorAddress);
        message.moniker !== undefined && (obj.moniker = message.moniker);
        message.tssIllegibilityInfo !== undefined && (obj.tssIllegibilityInfo = message.tssIllegibilityInfo
            ? exports.QueryValidatorsResponse_TssIllegibilityInfo.toJSON(message.tssIllegibilityInfo)
            : undefined);
        return obj;
    },
    create(base) {
        return exports.QueryValidatorsResponse_Validator.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryValidatorsResponse_Validator();
        message.operatorAddress = object.operatorAddress ?? "";
        message.moniker = object.moniker ?? "";
        message.tssIllegibilityInfo = (object.tssIllegibilityInfo !== undefined && object.tssIllegibilityInfo !== null)
            ? exports.QueryValidatorsResponse_TssIllegibilityInfo.fromPartial(object.tssIllegibilityInfo)
            : undefined;
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
