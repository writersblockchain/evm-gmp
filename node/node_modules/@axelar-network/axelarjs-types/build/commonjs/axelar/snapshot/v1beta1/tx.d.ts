import Long from "long";
import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "axelar.snapshot.v1beta1";
export interface RegisterProxyRequest {
    sender: Uint8Array;
    proxyAddr: Uint8Array;
}
export interface RegisterProxyResponse {
}
export interface DeactivateProxyRequest {
    sender: Uint8Array;
}
export interface DeactivateProxyResponse {
}
export declare const RegisterProxyRequest: {
    encode(message: RegisterProxyRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RegisterProxyRequest;
    fromJSON(object: any): RegisterProxyRequest;
    toJSON(message: RegisterProxyRequest): unknown;
    create<I extends {
        sender?: Uint8Array | undefined;
        proxyAddr?: Uint8Array | undefined;
    } & {
        sender?: Uint8Array | undefined;
        proxyAddr?: Uint8Array | undefined;
    } & { [K in Exclude<keyof I, keyof RegisterProxyRequest>]: never; }>(base?: I | undefined): RegisterProxyRequest;
    fromPartial<I_1 extends {
        sender?: Uint8Array | undefined;
        proxyAddr?: Uint8Array | undefined;
    } & {
        sender?: Uint8Array | undefined;
        proxyAddr?: Uint8Array | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof RegisterProxyRequest>]: never; }>(object: I_1): RegisterProxyRequest;
};
export declare const RegisterProxyResponse: {
    encode(_: RegisterProxyResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RegisterProxyResponse;
    fromJSON(_: any): RegisterProxyResponse;
    toJSON(_: RegisterProxyResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I | undefined): RegisterProxyResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): RegisterProxyResponse;
};
export declare const DeactivateProxyRequest: {
    encode(message: DeactivateProxyRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateProxyRequest;
    fromJSON(object: any): DeactivateProxyRequest;
    toJSON(message: DeactivateProxyRequest): unknown;
    create<I extends {
        sender?: Uint8Array | undefined;
    } & {
        sender?: Uint8Array | undefined;
    } & { [K in Exclude<keyof I, "sender">]: never; }>(base?: I | undefined): DeactivateProxyRequest;
    fromPartial<I_1 extends {
        sender?: Uint8Array | undefined;
    } & {
        sender?: Uint8Array | undefined;
    } & { [K_1 in Exclude<keyof I_1, "sender">]: never; }>(object: I_1): DeactivateProxyRequest;
};
export declare const DeactivateProxyResponse: {
    encode(_: DeactivateProxyResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateProxyResponse;
    fromJSON(_: any): DeactivateProxyResponse;
    toJSON(_: DeactivateProxyResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I | undefined): DeactivateProxyResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): DeactivateProxyResponse;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
