"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryServiceClientImpl = exports.MsgServiceClientImpl = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const query_1 = require("./query");
const tx_1 = require("./tx");
exports.protobufPackage = "axelar.multisig.v1beta1";
class MsgServiceClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "axelar.multisig.v1beta1.MsgService";
        this.rpc = rpc;
        this.StartKeygen = this.StartKeygen.bind(this);
        this.SubmitPubKey = this.SubmitPubKey.bind(this);
        this.SubmitSignature = this.SubmitSignature.bind(this);
        this.RotateKey = this.RotateKey.bind(this);
        this.KeygenOptOut = this.KeygenOptOut.bind(this);
        this.KeygenOptIn = this.KeygenOptIn.bind(this);
    }
    StartKeygen(request) {
        const data = tx_1.StartKeygenRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "StartKeygen", data);
        return promise.then((data) => tx_1.StartKeygenResponse.decode(new minimal_1.default.Reader(data)));
    }
    SubmitPubKey(request) {
        const data = tx_1.SubmitPubKeyRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "SubmitPubKey", data);
        return promise.then((data) => tx_1.SubmitPubKeyResponse.decode(new minimal_1.default.Reader(data)));
    }
    SubmitSignature(request) {
        const data = tx_1.SubmitSignatureRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "SubmitSignature", data);
        return promise.then((data) => tx_1.SubmitSignatureResponse.decode(new minimal_1.default.Reader(data)));
    }
    RotateKey(request) {
        const data = tx_1.RotateKeyRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RotateKey", data);
        return promise.then((data) => tx_1.RotateKeyResponse.decode(new minimal_1.default.Reader(data)));
    }
    KeygenOptOut(request) {
        const data = tx_1.KeygenOptOutRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "KeygenOptOut", data);
        return promise.then((data) => tx_1.KeygenOptOutResponse.decode(new minimal_1.default.Reader(data)));
    }
    KeygenOptIn(request) {
        const data = tx_1.KeygenOptInRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "KeygenOptIn", data);
        return promise.then((data) => tx_1.KeygenOptInResponse.decode(new minimal_1.default.Reader(data)));
    }
}
exports.MsgServiceClientImpl = MsgServiceClientImpl;
class QueryServiceClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "axelar.multisig.v1beta1.QueryService";
        this.rpc = rpc;
        this.KeyID = this.KeyID.bind(this);
        this.NextKeyID = this.NextKeyID.bind(this);
        this.Key = this.Key.bind(this);
        this.KeygenSession = this.KeygenSession.bind(this);
    }
    KeyID(request) {
        const data = query_1.KeyIDRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "KeyID", data);
        return promise.then((data) => query_1.KeyIDResponse.decode(new minimal_1.default.Reader(data)));
    }
    NextKeyID(request) {
        const data = query_1.NextKeyIDRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "NextKeyID", data);
        return promise.then((data) => query_1.NextKeyIDResponse.decode(new minimal_1.default.Reader(data)));
    }
    Key(request) {
        const data = query_1.KeyRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Key", data);
        return promise.then((data) => query_1.KeyResponse.decode(new minimal_1.default.Reader(data)));
    }
    KeygenSession(request) {
        const data = query_1.KeygenSessionRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "KeygenSession", data);
        return promise.then((data) => query_1.KeygenSessionResponse.decode(new minimal_1.default.Reader(data)));
    }
}
exports.QueryServiceClientImpl = QueryServiceClientImpl;
