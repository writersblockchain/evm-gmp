"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryServiceClientImpl = exports.MsgServiceClientImpl = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const query_1 = require("./query");
const tx_1 = require("./tx");
exports.protobufPackage = "axelar.evm.v1beta1";
class MsgServiceClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "axelar.evm.v1beta1.MsgService";
        this.rpc = rpc;
        this.SetGateway = this.SetGateway.bind(this);
        this.ConfirmGatewayTx = this.ConfirmGatewayTx.bind(this);
        this.ConfirmGatewayTxs = this.ConfirmGatewayTxs.bind(this);
        this.Link = this.Link.bind(this);
        this.ConfirmToken = this.ConfirmToken.bind(this);
        this.ConfirmDeposit = this.ConfirmDeposit.bind(this);
        this.ConfirmTransferKey = this.ConfirmTransferKey.bind(this);
        this.CreateDeployToken = this.CreateDeployToken.bind(this);
        this.CreateBurnTokens = this.CreateBurnTokens.bind(this);
        this.CreatePendingTransfers = this.CreatePendingTransfers.bind(this);
        this.CreateTransferOperatorship = this.CreateTransferOperatorship.bind(this);
        this.SignCommands = this.SignCommands.bind(this);
        this.AddChain = this.AddChain.bind(this);
        this.RetryFailedEvent = this.RetryFailedEvent.bind(this);
    }
    SetGateway(request) {
        const data = tx_1.SetGatewayRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "SetGateway", data);
        return promise.then((data) => tx_1.SetGatewayResponse.decode(new minimal_1.default.Reader(data)));
    }
    ConfirmGatewayTx(request) {
        const data = tx_1.ConfirmGatewayTxRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ConfirmGatewayTx", data);
        return promise.then((data) => tx_1.ConfirmGatewayTxResponse.decode(new minimal_1.default.Reader(data)));
    }
    ConfirmGatewayTxs(request) {
        const data = tx_1.ConfirmGatewayTxsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ConfirmGatewayTxs", data);
        return promise.then((data) => tx_1.ConfirmGatewayTxsResponse.decode(new minimal_1.default.Reader(data)));
    }
    Link(request) {
        const data = tx_1.LinkRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Link", data);
        return promise.then((data) => tx_1.LinkResponse.decode(new minimal_1.default.Reader(data)));
    }
    ConfirmToken(request) {
        const data = tx_1.ConfirmTokenRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ConfirmToken", data);
        return promise.then((data) => tx_1.ConfirmTokenResponse.decode(new minimal_1.default.Reader(data)));
    }
    ConfirmDeposit(request) {
        const data = tx_1.ConfirmDepositRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ConfirmDeposit", data);
        return promise.then((data) => tx_1.ConfirmDepositResponse.decode(new minimal_1.default.Reader(data)));
    }
    ConfirmTransferKey(request) {
        const data = tx_1.ConfirmTransferKeyRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ConfirmTransferKey", data);
        return promise.then((data) => tx_1.ConfirmTransferKeyResponse.decode(new minimal_1.default.Reader(data)));
    }
    CreateDeployToken(request) {
        const data = tx_1.CreateDeployTokenRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CreateDeployToken", data);
        return promise.then((data) => tx_1.CreateDeployTokenResponse.decode(new minimal_1.default.Reader(data)));
    }
    CreateBurnTokens(request) {
        const data = tx_1.CreateBurnTokensRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CreateBurnTokens", data);
        return promise.then((data) => tx_1.CreateBurnTokensResponse.decode(new minimal_1.default.Reader(data)));
    }
    CreatePendingTransfers(request) {
        const data = tx_1.CreatePendingTransfersRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CreatePendingTransfers", data);
        return promise.then((data) => tx_1.CreatePendingTransfersResponse.decode(new minimal_1.default.Reader(data)));
    }
    CreateTransferOperatorship(request) {
        const data = tx_1.CreateTransferOperatorshipRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CreateTransferOperatorship", data);
        return promise.then((data) => tx_1.CreateTransferOperatorshipResponse.decode(new minimal_1.default.Reader(data)));
    }
    SignCommands(request) {
        const data = tx_1.SignCommandsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "SignCommands", data);
        return promise.then((data) => tx_1.SignCommandsResponse.decode(new minimal_1.default.Reader(data)));
    }
    AddChain(request) {
        const data = tx_1.AddChainRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AddChain", data);
        return promise.then((data) => tx_1.AddChainResponse.decode(new minimal_1.default.Reader(data)));
    }
    RetryFailedEvent(request) {
        const data = tx_1.RetryFailedEventRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RetryFailedEvent", data);
        return promise.then((data) => tx_1.RetryFailedEventResponse.decode(new minimal_1.default.Reader(data)));
    }
}
exports.MsgServiceClientImpl = MsgServiceClientImpl;
class QueryServiceClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "axelar.evm.v1beta1.QueryService";
        this.rpc = rpc;
        this.BatchedCommands = this.BatchedCommands.bind(this);
        this.BurnerInfo = this.BurnerInfo.bind(this);
        this.ConfirmationHeight = this.ConfirmationHeight.bind(this);
        this.DepositState = this.DepositState.bind(this);
        this.PendingCommands = this.PendingCommands.bind(this);
        this.Chains = this.Chains.bind(this);
        this.Command = this.Command.bind(this);
        this.KeyAddress = this.KeyAddress.bind(this);
        this.GatewayAddress = this.GatewayAddress.bind(this);
        this.Bytecode = this.Bytecode.bind(this);
        this.Event = this.Event.bind(this);
        this.ERC20Tokens = this.ERC20Tokens.bind(this);
        this.TokenInfo = this.TokenInfo.bind(this);
    }
    BatchedCommands(request) {
        const data = query_1.BatchedCommandsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "BatchedCommands", data);
        return promise.then((data) => query_1.BatchedCommandsResponse.decode(new minimal_1.default.Reader(data)));
    }
    BurnerInfo(request) {
        const data = query_1.BurnerInfoRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "BurnerInfo", data);
        return promise.then((data) => query_1.BurnerInfoResponse.decode(new minimal_1.default.Reader(data)));
    }
    ConfirmationHeight(request) {
        const data = query_1.ConfirmationHeightRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ConfirmationHeight", data);
        return promise.then((data) => query_1.ConfirmationHeightResponse.decode(new minimal_1.default.Reader(data)));
    }
    DepositState(request) {
        const data = query_1.DepositStateRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "DepositState", data);
        return promise.then((data) => query_1.DepositStateResponse.decode(new minimal_1.default.Reader(data)));
    }
    PendingCommands(request) {
        const data = query_1.PendingCommandsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "PendingCommands", data);
        return promise.then((data) => query_1.PendingCommandsResponse.decode(new minimal_1.default.Reader(data)));
    }
    Chains(request) {
        const data = query_1.ChainsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Chains", data);
        return promise.then((data) => query_1.ChainsResponse.decode(new minimal_1.default.Reader(data)));
    }
    Command(request) {
        const data = query_1.CommandRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Command", data);
        return promise.then((data) => query_1.CommandResponse.decode(new minimal_1.default.Reader(data)));
    }
    KeyAddress(request) {
        const data = query_1.KeyAddressRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "KeyAddress", data);
        return promise.then((data) => query_1.KeyAddressResponse.decode(new minimal_1.default.Reader(data)));
    }
    GatewayAddress(request) {
        const data = query_1.GatewayAddressRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GatewayAddress", data);
        return promise.then((data) => query_1.GatewayAddressResponse.decode(new minimal_1.default.Reader(data)));
    }
    Bytecode(request) {
        const data = query_1.BytecodeRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Bytecode", data);
        return promise.then((data) => query_1.BytecodeResponse.decode(new minimal_1.default.Reader(data)));
    }
    Event(request) {
        const data = query_1.EventRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Event", data);
        return promise.then((data) => query_1.EventResponse.decode(new minimal_1.default.Reader(data)));
    }
    ERC20Tokens(request) {
        const data = query_1.ERC20TokensRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ERC20Tokens", data);
        return promise.then((data) => query_1.ERC20TokensResponse.decode(new minimal_1.default.Reader(data)));
    }
    TokenInfo(request) {
        const data = query_1.TokenInfoRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "TokenInfo", data);
        return promise.then((data) => query_1.TokenInfoResponse.decode(new minimal_1.default.Reader(data)));
    }
}
exports.QueryServiceClientImpl = QueryServiceClientImpl;
