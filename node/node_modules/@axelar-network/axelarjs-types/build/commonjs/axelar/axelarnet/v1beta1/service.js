"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryServiceClientImpl = exports.MsgServiceClientImpl = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const query_1 = require("./query");
const tx_1 = require("./tx");
exports.protobufPackage = "axelar.axelarnet.v1beta1";
class MsgServiceClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "axelar.axelarnet.v1beta1.MsgService";
        this.rpc = rpc;
        this.Link = this.Link.bind(this);
        this.ConfirmDeposit = this.ConfirmDeposit.bind(this);
        this.ExecutePendingTransfers = this.ExecutePendingTransfers.bind(this);
        this.AddCosmosBasedChain = this.AddCosmosBasedChain.bind(this);
        this.RegisterAsset = this.RegisterAsset.bind(this);
        this.RouteIBCTransfers = this.RouteIBCTransfers.bind(this);
        this.RegisterFeeCollector = this.RegisterFeeCollector.bind(this);
        this.RetryIBCTransfer = this.RetryIBCTransfer.bind(this);
        this.RouteMessage = this.RouteMessage.bind(this);
        this.CallContract = this.CallContract.bind(this);
    }
    Link(request) {
        const data = tx_1.LinkRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Link", data);
        return promise.then((data) => tx_1.LinkResponse.decode(new minimal_1.default.Reader(data)));
    }
    ConfirmDeposit(request) {
        const data = tx_1.ConfirmDepositRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ConfirmDeposit", data);
        return promise.then((data) => tx_1.ConfirmDepositResponse.decode(new minimal_1.default.Reader(data)));
    }
    ExecutePendingTransfers(request) {
        const data = tx_1.ExecutePendingTransfersRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ExecutePendingTransfers", data);
        return promise.then((data) => tx_1.ExecutePendingTransfersResponse.decode(new minimal_1.default.Reader(data)));
    }
    AddCosmosBasedChain(request) {
        const data = tx_1.AddCosmosBasedChainRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AddCosmosBasedChain", data);
        return promise.then((data) => tx_1.AddCosmosBasedChainResponse.decode(new minimal_1.default.Reader(data)));
    }
    RegisterAsset(request) {
        const data = tx_1.RegisterAssetRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RegisterAsset", data);
        return promise.then((data) => tx_1.RegisterAssetResponse.decode(new minimal_1.default.Reader(data)));
    }
    RouteIBCTransfers(request) {
        const data = tx_1.RouteIBCTransfersRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RouteIBCTransfers", data);
        return promise.then((data) => tx_1.RouteIBCTransfersResponse.decode(new minimal_1.default.Reader(data)));
    }
    RegisterFeeCollector(request) {
        const data = tx_1.RegisterFeeCollectorRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RegisterFeeCollector", data);
        return promise.then((data) => tx_1.RegisterFeeCollectorResponse.decode(new minimal_1.default.Reader(data)));
    }
    RetryIBCTransfer(request) {
        const data = tx_1.RetryIBCTransferRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RetryIBCTransfer", data);
        return promise.then((data) => tx_1.RetryIBCTransferResponse.decode(new minimal_1.default.Reader(data)));
    }
    RouteMessage(request) {
        const data = tx_1.RouteMessageRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RouteMessage", data);
        return promise.then((data) => tx_1.RouteMessageResponse.decode(new minimal_1.default.Reader(data)));
    }
    CallContract(request) {
        const data = tx_1.CallContractRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CallContract", data);
        return promise.then((data) => tx_1.CallContractResponse.decode(new minimal_1.default.Reader(data)));
    }
}
exports.MsgServiceClientImpl = MsgServiceClientImpl;
class QueryServiceClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "axelar.axelarnet.v1beta1.QueryService";
        this.rpc = rpc;
        this.PendingIBCTransferCount = this.PendingIBCTransferCount.bind(this);
    }
    PendingIBCTransferCount(request) {
        const data = query_1.PendingIBCTransferCountRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "PendingIBCTransferCount", data);
        return promise.then((data) => query_1.PendingIBCTransferCountResponse.decode(new minimal_1.default.Reader(data)));
    }
}
exports.QueryServiceClientImpl = QueryServiceClientImpl;
