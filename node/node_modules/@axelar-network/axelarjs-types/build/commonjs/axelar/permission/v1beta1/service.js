"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.MsgClientImpl = exports.protobufPackage = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const query_1 = require("./query");
const tx_1 = require("./tx");
exports.protobufPackage = "axelar.permission.v1beta1";
class MsgClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "axelar.permission.v1beta1.Msg";
        this.rpc = rpc;
        this.RegisterController = this.RegisterController.bind(this);
        this.DeregisterController = this.DeregisterController.bind(this);
        this.UpdateGovernanceKey = this.UpdateGovernanceKey.bind(this);
    }
    RegisterController(request) {
        const data = tx_1.RegisterControllerRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RegisterController", data);
        return promise.then((data) => tx_1.RegisterControllerResponse.decode(new minimal_1.default.Reader(data)));
    }
    DeregisterController(request) {
        const data = tx_1.DeregisterControllerRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "DeregisterController", data);
        return promise.then((data) => tx_1.DeregisterControllerResponse.decode(new minimal_1.default.Reader(data)));
    }
    UpdateGovernanceKey(request) {
        const data = tx_1.UpdateGovernanceKeyRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateGovernanceKey", data);
        return promise.then((data) => tx_1.UpdateGovernanceKeyResponse.decode(new minimal_1.default.Reader(data)));
    }
}
exports.MsgClientImpl = MsgClientImpl;
class QueryClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "axelar.permission.v1beta1.Query";
        this.rpc = rpc;
        this.GovernanceKey = this.GovernanceKey.bind(this);
    }
    GovernanceKey(request) {
        const data = query_1.QueryGovernanceKeyRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GovernanceKey", data);
        return promise.then((data) => query_1.QueryGovernanceKeyResponse.decode(new minimal_1.default.Reader(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
