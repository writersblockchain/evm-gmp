"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryGovernanceKeyResponse = exports.QueryGovernanceKeyRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const keys_1 = require("../../../cosmos/crypto/multisig/keys");
exports.protobufPackage = "axelar.permission.v1beta1";
function createBaseQueryGovernanceKeyRequest() {
    return {};
}
exports.QueryGovernanceKeyRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGovernanceKeyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryGovernanceKeyRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseQueryGovernanceKeyRequest();
        return message;
    },
};
function createBaseQueryGovernanceKeyResponse() {
    return { governanceKey: undefined };
}
exports.QueryGovernanceKeyResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.governanceKey !== undefined) {
            keys_1.LegacyAminoPubKey.encode(message.governanceKey, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGovernanceKeyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.governanceKey = keys_1.LegacyAminoPubKey.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            governanceKey: isSet(object.governanceKey) ? keys_1.LegacyAminoPubKey.fromJSON(object.governanceKey) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.governanceKey !== undefined &&
            (obj.governanceKey = message.governanceKey ? keys_1.LegacyAminoPubKey.toJSON(message.governanceKey) : undefined);
        return obj;
    },
    create(base) {
        return exports.QueryGovernanceKeyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryGovernanceKeyResponse();
        message.governanceKey = (object.governanceKey !== undefined && object.governanceKey !== null)
            ? keys_1.LegacyAminoPubKey.fromPartial(object.governanceKey)
            : undefined;
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
