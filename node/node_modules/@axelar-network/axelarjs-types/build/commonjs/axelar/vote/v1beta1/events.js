"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Voted = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "axelar.vote.v1beta1";
function createBaseVoted() {
    return { module: "", action: "", poll: "", voter: "", state: "" };
}
exports.Voted = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.module !== "") {
            writer.uint32(10).string(message.module);
        }
        if (message.action !== "") {
            writer.uint32(18).string(message.action);
        }
        if (message.poll !== "") {
            writer.uint32(26).string(message.poll);
        }
        if (message.voter !== "") {
            writer.uint32(34).string(message.voter);
        }
        if (message.state !== "") {
            writer.uint32(42).string(message.state);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVoted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.module = reader.string();
                    break;
                case 2:
                    message.action = reader.string();
                    break;
                case 3:
                    message.poll = reader.string();
                    break;
                case 4:
                    message.voter = reader.string();
                    break;
                case 5:
                    message.state = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            module: isSet(object.module) ? String(object.module) : "",
            action: isSet(object.action) ? String(object.action) : "",
            poll: isSet(object.poll) ? String(object.poll) : "",
            voter: isSet(object.voter) ? String(object.voter) : "",
            state: isSet(object.state) ? String(object.state) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.module !== undefined && (obj.module = message.module);
        message.action !== undefined && (obj.action = message.action);
        message.poll !== undefined && (obj.poll = message.poll);
        message.voter !== undefined && (obj.voter = message.voter);
        message.state !== undefined && (obj.state = message.state);
        return obj;
    },
    create(base) {
        return exports.Voted.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVoted();
        message.module = object.module ?? "";
        message.action = object.action ?? "";
        message.poll = object.poll ?? "";
        message.voter = object.voter ?? "";
        message.state = object.state ?? "";
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
