"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VoteResponse = exports.VoteRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const any_1 = require("../../../google/protobuf/any");
exports.protobufPackage = "axelar.vote.v1beta1";
function createBaseVoteRequest() {
    return { sender: new Uint8Array(), pollId: long_1.default.UZERO, vote: undefined };
}
exports.VoteRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sender.length !== 0) {
            writer.uint32(10).bytes(message.sender);
        }
        if (!message.pollId.isZero()) {
            writer.uint32(32).uint64(message.pollId);
        }
        if (message.vote !== undefined) {
            any_1.Any.encode(message.vote, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVoteRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.bytes();
                    break;
                case 4:
                    message.pollId = reader.uint64();
                    break;
                case 5:
                    message.vote = any_1.Any.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? bytesFromBase64(object.sender) : new Uint8Array(),
            pollId: isSet(object.pollId) ? long_1.default.fromValue(object.pollId) : long_1.default.UZERO,
            vote: isSet(object.vote) ? any_1.Any.fromJSON(object.vote) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.sender !== undefined &&
            (obj.sender = base64FromBytes(message.sender !== undefined ? message.sender : new Uint8Array()));
        message.pollId !== undefined && (obj.pollId = (message.pollId || long_1.default.UZERO).toString());
        message.vote !== undefined && (obj.vote = message.vote ? any_1.Any.toJSON(message.vote) : undefined);
        return obj;
    },
    create(base) {
        return exports.VoteRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVoteRequest();
        message.sender = object.sender ?? new Uint8Array();
        message.pollId = (object.pollId !== undefined && object.pollId !== null)
            ? long_1.default.fromValue(object.pollId)
            : long_1.default.UZERO;
        message.vote = (object.vote !== undefined && object.vote !== null) ? any_1.Any.fromPartial(object.vote) : undefined;
        return message;
    },
};
function createBaseVoteResponse() {
    return { log: "" };
}
exports.VoteResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.log !== "") {
            writer.uint32(10).string(message.log);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVoteResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.log = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { log: isSet(object.log) ? String(object.log) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.log !== undefined && (obj.log = message.log);
        return obj;
    },
    create(base) {
        return exports.VoteResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVoteResponse();
        message.log = object.log ?? "";
        return message;
    },
};
var tsProtoGlobalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (tsProtoGlobalThis.Buffer) {
        return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = tsProtoGlobalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (tsProtoGlobalThis.Buffer) {
        return tsProtoGlobalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return tsProtoGlobalThis.btoa(bin.join(""));
    }
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
