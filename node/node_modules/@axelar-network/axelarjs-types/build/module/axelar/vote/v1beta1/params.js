/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Threshold } from "../../utils/v1beta1/threshold";
export const protobufPackage = "axelar.vote.v1beta1";
function createBaseParams() {
    return { defaultVotingThreshold: undefined, endBlockerLimit: Long.ZERO };
}
export const Params = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.defaultVotingThreshold !== undefined) {
            Threshold.encode(message.defaultVotingThreshold, writer.uint32(10).fork()).ldelim();
        }
        if (!message.endBlockerLimit.isZero()) {
            writer.uint32(16).int64(message.endBlockerLimit);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.defaultVotingThreshold = Threshold.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.endBlockerLimit = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            defaultVotingThreshold: isSet(object.defaultVotingThreshold)
                ? Threshold.fromJSON(object.defaultVotingThreshold)
                : undefined,
            endBlockerLimit: isSet(object.endBlockerLimit) ? Long.fromValue(object.endBlockerLimit) : Long.ZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.defaultVotingThreshold !== undefined && (obj.defaultVotingThreshold = message.defaultVotingThreshold
            ? Threshold.toJSON(message.defaultVotingThreshold)
            : undefined);
        message.endBlockerLimit !== undefined && (obj.endBlockerLimit = (message.endBlockerLimit || Long.ZERO).toString());
        return obj;
    },
    create(base) {
        return Params.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseParams();
        message.defaultVotingThreshold =
            (object.defaultVotingThreshold !== undefined && object.defaultVotingThreshold !== null)
                ? Threshold.fromPartial(object.defaultVotingThreshold)
                : undefined;
        message.endBlockerLimit = (object.endBlockerLimit !== undefined && object.endBlockerLimit !== null)
            ? Long.fromValue(object.endBlockerLimit)
            : Long.ZERO;
        return message;
    },
};
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
