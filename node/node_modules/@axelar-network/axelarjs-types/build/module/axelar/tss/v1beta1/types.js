/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { keyRoleFromJSON, keyRoleToJSON, keyTypeFromJSON, keyTypeToJSON, } from "../exported/v1beta1/types";
export const protobufPackage = "axelar.tss.v1beta1";
function createBaseKeygenVoteData() {
    return { pubKey: new Uint8Array(), groupRecoveryInfo: new Uint8Array() };
}
export const KeygenVoteData = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pubKey.length !== 0) {
            writer.uint32(10).bytes(message.pubKey);
        }
        if (message.groupRecoveryInfo.length !== 0) {
            writer.uint32(18).bytes(message.groupRecoveryInfo);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseKeygenVoteData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pubKey = reader.bytes();
                    break;
                case 2:
                    message.groupRecoveryInfo = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pubKey: isSet(object.pubKey) ? bytesFromBase64(object.pubKey) : new Uint8Array(),
            groupRecoveryInfo: isSet(object.groupRecoveryInfo) ? bytesFromBase64(object.groupRecoveryInfo) : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.pubKey !== undefined &&
            (obj.pubKey = base64FromBytes(message.pubKey !== undefined ? message.pubKey : new Uint8Array()));
        message.groupRecoveryInfo !== undefined &&
            (obj.groupRecoveryInfo = base64FromBytes(message.groupRecoveryInfo !== undefined ? message.groupRecoveryInfo : new Uint8Array()));
        return obj;
    },
    create(base) {
        return KeygenVoteData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseKeygenVoteData();
        message.pubKey = object.pubKey ?? new Uint8Array();
        message.groupRecoveryInfo = object.groupRecoveryInfo ?? new Uint8Array();
        return message;
    },
};
function createBaseKeyInfo() {
    return { keyId: "", keyRole: 0, keyType: 0 };
}
export const KeyInfo = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.keyId !== "") {
            writer.uint32(10).string(message.keyId);
        }
        if (message.keyRole !== 0) {
            writer.uint32(16).int32(message.keyRole);
        }
        if (message.keyType !== 0) {
            writer.uint32(24).int32(message.keyType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseKeyInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.keyId = reader.string();
                    break;
                case 2:
                    message.keyRole = reader.int32();
                    break;
                case 3:
                    message.keyType = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            keyId: isSet(object.keyId) ? String(object.keyId) : "",
            keyRole: isSet(object.keyRole) ? keyRoleFromJSON(object.keyRole) : 0,
            keyType: isSet(object.keyType) ? keyTypeFromJSON(object.keyType) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.keyId !== undefined && (obj.keyId = message.keyId);
        message.keyRole !== undefined && (obj.keyRole = keyRoleToJSON(message.keyRole));
        message.keyType !== undefined && (obj.keyType = keyTypeToJSON(message.keyType));
        return obj;
    },
    create(base) {
        return KeyInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseKeyInfo();
        message.keyId = object.keyId ?? "";
        message.keyRole = object.keyRole ?? 0;
        message.keyType = object.keyType ?? 0;
        return message;
    },
};
function createBaseMultisigInfo() {
    return { id: "", timeout: Long.ZERO, targetNum: Long.ZERO, infos: [] };
}
export const MultisigInfo = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (!message.timeout.isZero()) {
            writer.uint32(16).int64(message.timeout);
        }
        if (!message.targetNum.isZero()) {
            writer.uint32(24).int64(message.targetNum);
        }
        for (const v of message.infos) {
            MultisigInfo_Info.encode(v, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMultisigInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.timeout = reader.int64();
                    break;
                case 3:
                    message.targetNum = reader.int64();
                    break;
                case 4:
                    message.infos.push(MultisigInfo_Info.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            timeout: isSet(object.timeout) ? Long.fromValue(object.timeout) : Long.ZERO,
            targetNum: isSet(object.targetNum) ? Long.fromValue(object.targetNum) : Long.ZERO,
            infos: Array.isArray(object?.infos) ? object.infos.map((e) => MultisigInfo_Info.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.timeout !== undefined && (obj.timeout = (message.timeout || Long.ZERO).toString());
        message.targetNum !== undefined && (obj.targetNum = (message.targetNum || Long.ZERO).toString());
        if (message.infos) {
            obj.infos = message.infos.map((e) => e ? MultisigInfo_Info.toJSON(e) : undefined);
        }
        else {
            obj.infos = [];
        }
        return obj;
    },
    create(base) {
        return MultisigInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMultisigInfo();
        message.id = object.id ?? "";
        message.timeout = (object.timeout !== undefined && object.timeout !== null)
            ? Long.fromValue(object.timeout)
            : Long.ZERO;
        message.targetNum = (object.targetNum !== undefined && object.targetNum !== null)
            ? Long.fromValue(object.targetNum)
            : Long.ZERO;
        message.infos = object.infos?.map((e) => MultisigInfo_Info.fromPartial(e)) || [];
        return message;
    },
};
function createBaseMultisigInfo_Info() {
    return { participant: new Uint8Array(), data: [] };
}
export const MultisigInfo_Info = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.participant.length !== 0) {
            writer.uint32(10).bytes(message.participant);
        }
        for (const v of message.data) {
            writer.uint32(18).bytes(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMultisigInfo_Info();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.participant = reader.bytes();
                    break;
                case 2:
                    message.data.push(reader.bytes());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            participant: isSet(object.participant) ? bytesFromBase64(object.participant) : new Uint8Array(),
            data: Array.isArray(object?.data) ? object.data.map((e) => bytesFromBase64(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.participant !== undefined &&
            (obj.participant = base64FromBytes(message.participant !== undefined ? message.participant : new Uint8Array()));
        if (message.data) {
            obj.data = message.data.map((e) => base64FromBytes(e !== undefined ? e : new Uint8Array()));
        }
        else {
            obj.data = [];
        }
        return obj;
    },
    create(base) {
        return MultisigInfo_Info.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMultisigInfo_Info();
        message.participant = object.participant ?? new Uint8Array();
        message.data = object.data?.map((e) => e) || [];
        return message;
    },
};
function createBaseKeyRecoveryInfo() {
    return { keyId: "", public: new Uint8Array(), private: {} };
}
export const KeyRecoveryInfo = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.keyId !== "") {
            writer.uint32(10).string(message.keyId);
        }
        if (message.public.length !== 0) {
            writer.uint32(18).bytes(message.public);
        }
        Object.entries(message.private).forEach(([key, value]) => {
            KeyRecoveryInfo_PrivateEntry.encode({ key: key, value }, writer.uint32(26).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseKeyRecoveryInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.keyId = reader.string();
                    break;
                case 2:
                    message.public = reader.bytes();
                    break;
                case 3:
                    const entry3 = KeyRecoveryInfo_PrivateEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.private[entry3.key] = entry3.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            keyId: isSet(object.keyId) ? String(object.keyId) : "",
            public: isSet(object.public) ? bytesFromBase64(object.public) : new Uint8Array(),
            private: isObject(object.private)
                ? Object.entries(object.private).reduce((acc, [key, value]) => {
                    acc[key] = bytesFromBase64(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        message.keyId !== undefined && (obj.keyId = message.keyId);
        message.public !== undefined &&
            (obj.public = base64FromBytes(message.public !== undefined ? message.public : new Uint8Array()));
        obj.private = {};
        if (message.private) {
            Object.entries(message.private).forEach(([k, v]) => {
                obj.private[k] = base64FromBytes(v);
            });
        }
        return obj;
    },
    create(base) {
        return KeyRecoveryInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseKeyRecoveryInfo();
        message.keyId = object.keyId ?? "";
        message.public = object.public ?? new Uint8Array();
        message.private = Object.entries(object.private ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = value;
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseKeyRecoveryInfo_PrivateEntry() {
    return { key: "", value: new Uint8Array() };
}
export const KeyRecoveryInfo_PrivateEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value.length !== 0) {
            writer.uint32(18).bytes(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseKeyRecoveryInfo_PrivateEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined &&
            (obj.value = base64FromBytes(message.value !== undefined ? message.value : new Uint8Array()));
        return obj;
    },
    create(base) {
        return KeyRecoveryInfo_PrivateEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseKeyRecoveryInfo_PrivateEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? new Uint8Array();
        return message;
    },
};
function createBaseExternalKeys() {
    return { chain: "", keyIds: [] };
}
export const ExternalKeys = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.chain !== "") {
            writer.uint32(10).string(message.chain);
        }
        for (const v of message.keyIds) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExternalKeys();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chain = reader.string();
                    break;
                case 2:
                    message.keyIds.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            chain: isSet(object.chain) ? String(object.chain) : "",
            keyIds: Array.isArray(object?.keyIds) ? object.keyIds.map((e) => String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.chain !== undefined && (obj.chain = message.chain);
        if (message.keyIds) {
            obj.keyIds = message.keyIds.map((e) => e);
        }
        else {
            obj.keyIds = [];
        }
        return obj;
    },
    create(base) {
        return ExternalKeys.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseExternalKeys();
        message.chain = object.chain ?? "";
        message.keyIds = object.keyIds?.map((e) => e) || [];
        return message;
    },
};
function createBaseValidatorStatus() {
    return { validator: new Uint8Array(), suspendedUntil: Long.UZERO };
}
export const ValidatorStatus = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.validator.length !== 0) {
            writer.uint32(10).bytes(message.validator);
        }
        if (!message.suspendedUntil.isZero()) {
            writer.uint32(16).uint64(message.suspendedUntil);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseValidatorStatus();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.validator = reader.bytes();
                    break;
                case 2:
                    message.suspendedUntil = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            validator: isSet(object.validator) ? bytesFromBase64(object.validator) : new Uint8Array(),
            suspendedUntil: isSet(object.suspendedUntil) ? Long.fromValue(object.suspendedUntil) : Long.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.validator !== undefined &&
            (obj.validator = base64FromBytes(message.validator !== undefined ? message.validator : new Uint8Array()));
        message.suspendedUntil !== undefined && (obj.suspendedUntil = (message.suspendedUntil || Long.UZERO).toString());
        return obj;
    },
    create(base) {
        return ValidatorStatus.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseValidatorStatus();
        message.validator = object.validator ?? new Uint8Array();
        message.suspendedUntil = (object.suspendedUntil !== undefined && object.suspendedUntil !== null)
            ? Long.fromValue(object.suspendedUntil)
            : Long.UZERO;
        return message;
    },
};
var tsProtoGlobalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (tsProtoGlobalThis.Buffer) {
        return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = tsProtoGlobalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (tsProtoGlobalThis.Buffer) {
        return tsProtoGlobalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return tsProtoGlobalThis.btoa(bin.join(""));
    }
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
