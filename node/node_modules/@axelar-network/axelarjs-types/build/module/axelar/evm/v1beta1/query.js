/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { batchedCommandsStatusFromJSON, batchedCommandsStatusToJSON, BurnerInfo, depositStatusFromJSON, depositStatusToJSON, Event, TokenDetails, } from "./types";
export const protobufPackage = "axelar.evm.v1beta1";
export var ChainStatus;
(function (ChainStatus) {
    ChainStatus[ChainStatus["CHAIN_STATUS_UNSPECIFIED"] = 0] = "CHAIN_STATUS_UNSPECIFIED";
    ChainStatus[ChainStatus["CHAIN_STATUS_ACTIVATED"] = 1] = "CHAIN_STATUS_ACTIVATED";
    ChainStatus[ChainStatus["CHAIN_STATUS_DEACTIVATED"] = 2] = "CHAIN_STATUS_DEACTIVATED";
    ChainStatus[ChainStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ChainStatus || (ChainStatus = {}));
export function chainStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "CHAIN_STATUS_UNSPECIFIED":
            return ChainStatus.CHAIN_STATUS_UNSPECIFIED;
        case 1:
        case "CHAIN_STATUS_ACTIVATED":
            return ChainStatus.CHAIN_STATUS_ACTIVATED;
        case 2:
        case "CHAIN_STATUS_DEACTIVATED":
            return ChainStatus.CHAIN_STATUS_DEACTIVATED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ChainStatus.UNRECOGNIZED;
    }
}
export function chainStatusToJSON(object) {
    switch (object) {
        case ChainStatus.CHAIN_STATUS_UNSPECIFIED:
            return "CHAIN_STATUS_UNSPECIFIED";
        case ChainStatus.CHAIN_STATUS_ACTIVATED:
            return "CHAIN_STATUS_ACTIVATED";
        case ChainStatus.CHAIN_STATUS_DEACTIVATED:
            return "CHAIN_STATUS_DEACTIVATED";
        case ChainStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
export var TokenType;
(function (TokenType) {
    TokenType[TokenType["TOKEN_TYPE_UNSPECIFIED"] = 0] = "TOKEN_TYPE_UNSPECIFIED";
    TokenType[TokenType["TOKEN_TYPE_INTERNAL"] = 1] = "TOKEN_TYPE_INTERNAL";
    TokenType[TokenType["TOKEN_TYPE_EXTERNAL"] = 2] = "TOKEN_TYPE_EXTERNAL";
    TokenType[TokenType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(TokenType || (TokenType = {}));
export function tokenTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "TOKEN_TYPE_UNSPECIFIED":
            return TokenType.TOKEN_TYPE_UNSPECIFIED;
        case 1:
        case "TOKEN_TYPE_INTERNAL":
            return TokenType.TOKEN_TYPE_INTERNAL;
        case 2:
        case "TOKEN_TYPE_EXTERNAL":
            return TokenType.TOKEN_TYPE_EXTERNAL;
        case -1:
        case "UNRECOGNIZED":
        default:
            return TokenType.UNRECOGNIZED;
    }
}
export function tokenTypeToJSON(object) {
    switch (object) {
        case TokenType.TOKEN_TYPE_UNSPECIFIED:
            return "TOKEN_TYPE_UNSPECIFIED";
        case TokenType.TOKEN_TYPE_INTERNAL:
            return "TOKEN_TYPE_INTERNAL";
        case TokenType.TOKEN_TYPE_EXTERNAL:
            return "TOKEN_TYPE_EXTERNAL";
        case TokenType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseDepositQueryParams() {
    return { address: "", asset: "", chain: "" };
}
export const DepositQueryParams = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.asset !== "") {
            writer.uint32(18).string(message.asset);
        }
        if (message.chain !== "") {
            writer.uint32(26).string(message.chain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDepositQueryParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.address = reader.string();
                    break;
                case 2:
                    message.asset = reader.string();
                    break;
                case 3:
                    message.chain = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? String(object.address) : "",
            asset: isSet(object.asset) ? String(object.asset) : "",
            chain: isSet(object.chain) ? String(object.chain) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.address !== undefined && (obj.address = message.address);
        message.asset !== undefined && (obj.asset = message.asset);
        message.chain !== undefined && (obj.chain = message.chain);
        return obj;
    },
    create(base) {
        return DepositQueryParams.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDepositQueryParams();
        message.address = object.address ?? "";
        message.asset = object.asset ?? "";
        message.chain = object.chain ?? "";
        return message;
    },
};
function createBaseBatchedCommandsRequest() {
    return { chain: "", id: "" };
}
export const BatchedCommandsRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.chain !== "") {
            writer.uint32(10).string(message.chain);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBatchedCommandsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chain = reader.string();
                    break;
                case 2:
                    message.id = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { chain: isSet(object.chain) ? String(object.chain) : "", id: isSet(object.id) ? String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.chain !== undefined && (obj.chain = message.chain);
        message.id !== undefined && (obj.id = message.id);
        return obj;
    },
    create(base) {
        return BatchedCommandsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBatchedCommandsRequest();
        message.chain = object.chain ?? "";
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseBatchedCommandsResponse() {
    return {
        id: "",
        data: "",
        status: 0,
        keyId: "",
        executeData: "",
        prevBatchedCommandsId: "",
        commandIds: [],
        proof: undefined,
    };
}
export const BatchedCommandsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.data !== "") {
            writer.uint32(18).string(message.data);
        }
        if (message.status !== 0) {
            writer.uint32(24).int32(message.status);
        }
        if (message.keyId !== "") {
            writer.uint32(34).string(message.keyId);
        }
        if (message.executeData !== "") {
            writer.uint32(50).string(message.executeData);
        }
        if (message.prevBatchedCommandsId !== "") {
            writer.uint32(58).string(message.prevBatchedCommandsId);
        }
        for (const v of message.commandIds) {
            writer.uint32(66).string(v);
        }
        if (message.proof !== undefined) {
            Proof.encode(message.proof, writer.uint32(74).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBatchedCommandsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.data = reader.string();
                    break;
                case 3:
                    message.status = reader.int32();
                    break;
                case 4:
                    message.keyId = reader.string();
                    break;
                case 6:
                    message.executeData = reader.string();
                    break;
                case 7:
                    message.prevBatchedCommandsId = reader.string();
                    break;
                case 8:
                    message.commandIds.push(reader.string());
                    break;
                case 9:
                    message.proof = Proof.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            data: isSet(object.data) ? String(object.data) : "",
            status: isSet(object.status) ? batchedCommandsStatusFromJSON(object.status) : 0,
            keyId: isSet(object.keyId) ? String(object.keyId) : "",
            executeData: isSet(object.executeData) ? String(object.executeData) : "",
            prevBatchedCommandsId: isSet(object.prevBatchedCommandsId) ? String(object.prevBatchedCommandsId) : "",
            commandIds: Array.isArray(object?.commandIds) ? object.commandIds.map((e) => String(e)) : [],
            proof: isSet(object.proof) ? Proof.fromJSON(object.proof) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.data !== undefined && (obj.data = message.data);
        message.status !== undefined && (obj.status = batchedCommandsStatusToJSON(message.status));
        message.keyId !== undefined && (obj.keyId = message.keyId);
        message.executeData !== undefined && (obj.executeData = message.executeData);
        message.prevBatchedCommandsId !== undefined && (obj.prevBatchedCommandsId = message.prevBatchedCommandsId);
        if (message.commandIds) {
            obj.commandIds = message.commandIds.map((e) => e);
        }
        else {
            obj.commandIds = [];
        }
        message.proof !== undefined && (obj.proof = message.proof ? Proof.toJSON(message.proof) : undefined);
        return obj;
    },
    create(base) {
        return BatchedCommandsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBatchedCommandsResponse();
        message.id = object.id ?? "";
        message.data = object.data ?? "";
        message.status = object.status ?? 0;
        message.keyId = object.keyId ?? "";
        message.executeData = object.executeData ?? "";
        message.prevBatchedCommandsId = object.prevBatchedCommandsId ?? "";
        message.commandIds = object.commandIds?.map((e) => e) || [];
        message.proof = (object.proof !== undefined && object.proof !== null) ? Proof.fromPartial(object.proof) : undefined;
        return message;
    },
};
function createBaseKeyAddressRequest() {
    return { chain: "", keyId: "" };
}
export const KeyAddressRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.chain !== "") {
            writer.uint32(10).string(message.chain);
        }
        if (message.keyId !== "") {
            writer.uint32(34).string(message.keyId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseKeyAddressRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chain = reader.string();
                    break;
                case 4:
                    message.keyId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            chain: isSet(object.chain) ? String(object.chain) : "",
            keyId: isSet(object.keyId) ? String(object.keyId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.chain !== undefined && (obj.chain = message.chain);
        message.keyId !== undefined && (obj.keyId = message.keyId);
        return obj;
    },
    create(base) {
        return KeyAddressRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseKeyAddressRequest();
        message.chain = object.chain ?? "";
        message.keyId = object.keyId ?? "";
        return message;
    },
};
function createBaseKeyAddressResponse() {
    return { keyId: "", addresses: [], threshold: "" };
}
export const KeyAddressResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.keyId !== "") {
            writer.uint32(10).string(message.keyId);
        }
        for (const v of message.addresses) {
            KeyAddressResponse_WeightedAddress.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.threshold !== "") {
            writer.uint32(26).string(message.threshold);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseKeyAddressResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.keyId = reader.string();
                    break;
                case 2:
                    message.addresses.push(KeyAddressResponse_WeightedAddress.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.threshold = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            keyId: isSet(object.keyId) ? String(object.keyId) : "",
            addresses: Array.isArray(object?.addresses)
                ? object.addresses.map((e) => KeyAddressResponse_WeightedAddress.fromJSON(e))
                : [],
            threshold: isSet(object.threshold) ? String(object.threshold) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.keyId !== undefined && (obj.keyId = message.keyId);
        if (message.addresses) {
            obj.addresses = message.addresses.map((e) => e ? KeyAddressResponse_WeightedAddress.toJSON(e) : undefined);
        }
        else {
            obj.addresses = [];
        }
        message.threshold !== undefined && (obj.threshold = message.threshold);
        return obj;
    },
    create(base) {
        return KeyAddressResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseKeyAddressResponse();
        message.keyId = object.keyId ?? "";
        message.addresses = object.addresses?.map((e) => KeyAddressResponse_WeightedAddress.fromPartial(e)) || [];
        message.threshold = object.threshold ?? "";
        return message;
    },
};
function createBaseKeyAddressResponse_WeightedAddress() {
    return { address: "", weight: "" };
}
export const KeyAddressResponse_WeightedAddress = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.weight !== "") {
            writer.uint32(18).string(message.weight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseKeyAddressResponse_WeightedAddress();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.address = reader.string();
                    break;
                case 2:
                    message.weight = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? String(object.address) : "",
            weight: isSet(object.weight) ? String(object.weight) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.address !== undefined && (obj.address = message.address);
        message.weight !== undefined && (obj.weight = message.weight);
        return obj;
    },
    create(base) {
        return KeyAddressResponse_WeightedAddress.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseKeyAddressResponse_WeightedAddress();
        message.address = object.address ?? "";
        message.weight = object.weight ?? "";
        return message;
    },
};
function createBaseQueryTokenAddressResponse() {
    return { address: "", confirmed: false };
}
export const QueryTokenAddressResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.confirmed === true) {
            writer.uint32(16).bool(message.confirmed);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryTokenAddressResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.address = reader.string();
                    break;
                case 2:
                    message.confirmed = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? String(object.address) : "",
            confirmed: isSet(object.confirmed) ? Boolean(object.confirmed) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        message.address !== undefined && (obj.address = message.address);
        message.confirmed !== undefined && (obj.confirmed = message.confirmed);
        return obj;
    },
    create(base) {
        return QueryTokenAddressResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryTokenAddressResponse();
        message.address = object.address ?? "";
        message.confirmed = object.confirmed ?? false;
        return message;
    },
};
function createBaseQueryDepositStateParams() {
    return { txId: new Uint8Array(), burnerAddress: new Uint8Array() };
}
export const QueryDepositStateParams = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.txId.length !== 0) {
            writer.uint32(10).bytes(message.txId);
        }
        if (message.burnerAddress.length !== 0) {
            writer.uint32(18).bytes(message.burnerAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDepositStateParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.txId = reader.bytes();
                    break;
                case 2:
                    message.burnerAddress = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            txId: isSet(object.txId) ? bytesFromBase64(object.txId) : new Uint8Array(),
            burnerAddress: isSet(object.burnerAddress) ? bytesFromBase64(object.burnerAddress) : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.txId !== undefined &&
            (obj.txId = base64FromBytes(message.txId !== undefined ? message.txId : new Uint8Array()));
        message.burnerAddress !== undefined &&
            (obj.burnerAddress = base64FromBytes(message.burnerAddress !== undefined ? message.burnerAddress : new Uint8Array()));
        return obj;
    },
    create(base) {
        return QueryDepositStateParams.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryDepositStateParams();
        message.txId = object.txId ?? new Uint8Array();
        message.burnerAddress = object.burnerAddress ?? new Uint8Array();
        return message;
    },
};
function createBaseDepositStateRequest() {
    return { chain: "", params: undefined };
}
export const DepositStateRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.chain !== "") {
            writer.uint32(10).string(message.chain);
        }
        if (message.params !== undefined) {
            QueryDepositStateParams.encode(message.params, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDepositStateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chain = reader.string();
                    break;
                case 2:
                    message.params = QueryDepositStateParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            chain: isSet(object.chain) ? String(object.chain) : "",
            params: isSet(object.params) ? QueryDepositStateParams.fromJSON(object.params) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.chain !== undefined && (obj.chain = message.chain);
        message.params !== undefined &&
            (obj.params = message.params ? QueryDepositStateParams.toJSON(message.params) : undefined);
        return obj;
    },
    create(base) {
        return DepositStateRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDepositStateRequest();
        message.chain = object.chain ?? "";
        message.params = (object.params !== undefined && object.params !== null)
            ? QueryDepositStateParams.fromPartial(object.params)
            : undefined;
        return message;
    },
};
function createBaseDepositStateResponse() {
    return { status: 0 };
}
export const DepositStateResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.status !== 0) {
            writer.uint32(16).int32(message.status);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDepositStateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    message.status = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { status: isSet(object.status) ? depositStatusFromJSON(object.status) : 0 };
    },
    toJSON(message) {
        const obj = {};
        message.status !== undefined && (obj.status = depositStatusToJSON(message.status));
        return obj;
    },
    create(base) {
        return DepositStateResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDepositStateResponse();
        message.status = object.status ?? 0;
        return message;
    },
};
function createBaseEventRequest() {
    return { chain: "", eventId: "" };
}
export const EventRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.chain !== "") {
            writer.uint32(10).string(message.chain);
        }
        if (message.eventId !== "") {
            writer.uint32(18).string(message.eventId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chain = reader.string();
                    break;
                case 2:
                    message.eventId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            chain: isSet(object.chain) ? String(object.chain) : "",
            eventId: isSet(object.eventId) ? String(object.eventId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.chain !== undefined && (obj.chain = message.chain);
        message.eventId !== undefined && (obj.eventId = message.eventId);
        return obj;
    },
    create(base) {
        return EventRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEventRequest();
        message.chain = object.chain ?? "";
        message.eventId = object.eventId ?? "";
        return message;
    },
};
function createBaseEventResponse() {
    return { event: undefined };
}
export const EventResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.event !== undefined) {
            Event.encode(message.event, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.event = Event.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { event: isSet(object.event) ? Event.fromJSON(object.event) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.event !== undefined && (obj.event = message.event ? Event.toJSON(message.event) : undefined);
        return obj;
    },
    create(base) {
        return EventResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEventResponse();
        message.event = (object.event !== undefined && object.event !== null) ? Event.fromPartial(object.event) : undefined;
        return message;
    },
};
function createBaseQueryBurnerAddressResponse() {
    return { address: "" };
}
export const QueryBurnerAddressResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBurnerAddressResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.address = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { address: isSet(object.address) ? String(object.address) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.address !== undefined && (obj.address = message.address);
        return obj;
    },
    create(base) {
        return QueryBurnerAddressResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryBurnerAddressResponse();
        message.address = object.address ?? "";
        return message;
    },
};
function createBaseChainsRequest() {
    return { status: 0 };
}
export const ChainsRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.status !== 0) {
            writer.uint32(8).int32(message.status);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChainsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.status = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { status: isSet(object.status) ? chainStatusFromJSON(object.status) : 0 };
    },
    toJSON(message) {
        const obj = {};
        message.status !== undefined && (obj.status = chainStatusToJSON(message.status));
        return obj;
    },
    create(base) {
        return ChainsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseChainsRequest();
        message.status = object.status ?? 0;
        return message;
    },
};
function createBaseChainsResponse() {
    return { chains: [] };
}
export const ChainsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.chains) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChainsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chains.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { chains: Array.isArray(object?.chains) ? object.chains.map((e) => String(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.chains) {
            obj.chains = message.chains.map((e) => e);
        }
        else {
            obj.chains = [];
        }
        return obj;
    },
    create(base) {
        return ChainsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseChainsResponse();
        message.chains = object.chains?.map((e) => e) || [];
        return message;
    },
};
function createBaseCommandRequest() {
    return { chain: "", id: "" };
}
export const CommandRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.chain !== "") {
            writer.uint32(10).string(message.chain);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCommandRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chain = reader.string();
                    break;
                case 2:
                    message.id = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { chain: isSet(object.chain) ? String(object.chain) : "", id: isSet(object.id) ? String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.chain !== undefined && (obj.chain = message.chain);
        message.id !== undefined && (obj.id = message.id);
        return obj;
    },
    create(base) {
        return CommandRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCommandRequest();
        message.chain = object.chain ?? "";
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseCommandResponse() {
    return { id: "", type: "", params: {}, keyId: "", maxGasCost: 0 };
}
export const CommandResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.type !== "") {
            writer.uint32(18).string(message.type);
        }
        Object.entries(message.params).forEach(([key, value]) => {
            CommandResponse_ParamsEntry.encode({ key: key, value }, writer.uint32(26).fork()).ldelim();
        });
        if (message.keyId !== "") {
            writer.uint32(34).string(message.keyId);
        }
        if (message.maxGasCost !== 0) {
            writer.uint32(40).uint32(message.maxGasCost);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCommandResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.type = reader.string();
                    break;
                case 3:
                    const entry3 = CommandResponse_ParamsEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.params[entry3.key] = entry3.value;
                    }
                    break;
                case 4:
                    message.keyId = reader.string();
                    break;
                case 5:
                    message.maxGasCost = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            type: isSet(object.type) ? String(object.type) : "",
            params: isObject(object.params)
                ? Object.entries(object.params).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            keyId: isSet(object.keyId) ? String(object.keyId) : "",
            maxGasCost: isSet(object.maxGasCost) ? Number(object.maxGasCost) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.type !== undefined && (obj.type = message.type);
        obj.params = {};
        if (message.params) {
            Object.entries(message.params).forEach(([k, v]) => {
                obj.params[k] = v;
            });
        }
        message.keyId !== undefined && (obj.keyId = message.keyId);
        message.maxGasCost !== undefined && (obj.maxGasCost = Math.round(message.maxGasCost));
        return obj;
    },
    create(base) {
        return CommandResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCommandResponse();
        message.id = object.id ?? "";
        message.type = object.type ?? "";
        message.params = Object.entries(object.params ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        message.keyId = object.keyId ?? "";
        message.maxGasCost = object.maxGasCost ?? 0;
        return message;
    },
};
function createBaseCommandResponse_ParamsEntry() {
    return { key: "", value: "" };
}
export const CommandResponse_ParamsEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCommandResponse_ParamsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    create(base) {
        return CommandResponse_ParamsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCommandResponse_ParamsEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
function createBasePendingCommandsRequest() {
    return { chain: "" };
}
export const PendingCommandsRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.chain !== "") {
            writer.uint32(10).string(message.chain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePendingCommandsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chain = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { chain: isSet(object.chain) ? String(object.chain) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.chain !== undefined && (obj.chain = message.chain);
        return obj;
    },
    create(base) {
        return PendingCommandsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePendingCommandsRequest();
        message.chain = object.chain ?? "";
        return message;
    },
};
function createBasePendingCommandsResponse() {
    return { commands: [] };
}
export const PendingCommandsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.commands) {
            QueryCommandResponse.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePendingCommandsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.commands.push(QueryCommandResponse.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            commands: Array.isArray(object?.commands)
                ? object.commands.map((e) => QueryCommandResponse.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.commands) {
            obj.commands = message.commands.map((e) => e ? QueryCommandResponse.toJSON(e) : undefined);
        }
        else {
            obj.commands = [];
        }
        return obj;
    },
    create(base) {
        return PendingCommandsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePendingCommandsResponse();
        message.commands = object.commands?.map((e) => QueryCommandResponse.fromPartial(e)) || [];
        return message;
    },
};
function createBaseQueryCommandResponse() {
    return { id: "", type: "", params: {}, keyId: "", maxGasCost: 0 };
}
export const QueryCommandResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.type !== "") {
            writer.uint32(18).string(message.type);
        }
        Object.entries(message.params).forEach(([key, value]) => {
            QueryCommandResponse_ParamsEntry.encode({ key: key, value }, writer.uint32(26).fork()).ldelim();
        });
        if (message.keyId !== "") {
            writer.uint32(34).string(message.keyId);
        }
        if (message.maxGasCost !== 0) {
            writer.uint32(40).uint32(message.maxGasCost);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCommandResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.type = reader.string();
                    break;
                case 3:
                    const entry3 = QueryCommandResponse_ParamsEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.params[entry3.key] = entry3.value;
                    }
                    break;
                case 4:
                    message.keyId = reader.string();
                    break;
                case 5:
                    message.maxGasCost = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            type: isSet(object.type) ? String(object.type) : "",
            params: isObject(object.params)
                ? Object.entries(object.params).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            keyId: isSet(object.keyId) ? String(object.keyId) : "",
            maxGasCost: isSet(object.maxGasCost) ? Number(object.maxGasCost) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.type !== undefined && (obj.type = message.type);
        obj.params = {};
        if (message.params) {
            Object.entries(message.params).forEach(([k, v]) => {
                obj.params[k] = v;
            });
        }
        message.keyId !== undefined && (obj.keyId = message.keyId);
        message.maxGasCost !== undefined && (obj.maxGasCost = Math.round(message.maxGasCost));
        return obj;
    },
    create(base) {
        return QueryCommandResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryCommandResponse();
        message.id = object.id ?? "";
        message.type = object.type ?? "";
        message.params = Object.entries(object.params ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        message.keyId = object.keyId ?? "";
        message.maxGasCost = object.maxGasCost ?? 0;
        return message;
    },
};
function createBaseQueryCommandResponse_ParamsEntry() {
    return { key: "", value: "" };
}
export const QueryCommandResponse_ParamsEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCommandResponse_ParamsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    create(base) {
        return QueryCommandResponse_ParamsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryCommandResponse_ParamsEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
function createBaseBurnerInfoRequest() {
    return { address: new Uint8Array() };
}
export const BurnerInfoRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.address.length !== 0) {
            writer.uint32(10).bytes(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBurnerInfoRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.address = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { address: isSet(object.address) ? bytesFromBase64(object.address) : new Uint8Array() };
    },
    toJSON(message) {
        const obj = {};
        message.address !== undefined &&
            (obj.address = base64FromBytes(message.address !== undefined ? message.address : new Uint8Array()));
        return obj;
    },
    create(base) {
        return BurnerInfoRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBurnerInfoRequest();
        message.address = object.address ?? new Uint8Array();
        return message;
    },
};
function createBaseBurnerInfoResponse() {
    return { chain: "", burnerInfo: undefined };
}
export const BurnerInfoResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.chain !== "") {
            writer.uint32(10).string(message.chain);
        }
        if (message.burnerInfo !== undefined) {
            BurnerInfo.encode(message.burnerInfo, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBurnerInfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chain = reader.string();
                    break;
                case 2:
                    message.burnerInfo = BurnerInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            chain: isSet(object.chain) ? String(object.chain) : "",
            burnerInfo: isSet(object.burnerInfo) ? BurnerInfo.fromJSON(object.burnerInfo) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.chain !== undefined && (obj.chain = message.chain);
        message.burnerInfo !== undefined &&
            (obj.burnerInfo = message.burnerInfo ? BurnerInfo.toJSON(message.burnerInfo) : undefined);
        return obj;
    },
    create(base) {
        return BurnerInfoResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBurnerInfoResponse();
        message.chain = object.chain ?? "";
        message.burnerInfo = (object.burnerInfo !== undefined && object.burnerInfo !== null)
            ? BurnerInfo.fromPartial(object.burnerInfo)
            : undefined;
        return message;
    },
};
function createBaseConfirmationHeightRequest() {
    return { chain: "" };
}
export const ConfirmationHeightRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.chain !== "") {
            writer.uint32(10).string(message.chain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfirmationHeightRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chain = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { chain: isSet(object.chain) ? String(object.chain) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.chain !== undefined && (obj.chain = message.chain);
        return obj;
    },
    create(base) {
        return ConfirmationHeightRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseConfirmationHeightRequest();
        message.chain = object.chain ?? "";
        return message;
    },
};
function createBaseConfirmationHeightResponse() {
    return { height: Long.UZERO };
}
export const ConfirmationHeightResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.height.isZero()) {
            writer.uint32(8).uint64(message.height);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfirmationHeightResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.height = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { height: isSet(object.height) ? Long.fromValue(object.height) : Long.UZERO };
    },
    toJSON(message) {
        const obj = {};
        message.height !== undefined && (obj.height = (message.height || Long.UZERO).toString());
        return obj;
    },
    create(base) {
        return ConfirmationHeightResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseConfirmationHeightResponse();
        message.height = (object.height !== undefined && object.height !== null)
            ? Long.fromValue(object.height)
            : Long.UZERO;
        return message;
    },
};
function createBaseGatewayAddressRequest() {
    return { chain: "" };
}
export const GatewayAddressRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.chain !== "") {
            writer.uint32(10).string(message.chain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGatewayAddressRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chain = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { chain: isSet(object.chain) ? String(object.chain) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.chain !== undefined && (obj.chain = message.chain);
        return obj;
    },
    create(base) {
        return GatewayAddressRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGatewayAddressRequest();
        message.chain = object.chain ?? "";
        return message;
    },
};
function createBaseGatewayAddressResponse() {
    return { address: "" };
}
export const GatewayAddressResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGatewayAddressResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.address = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { address: isSet(object.address) ? String(object.address) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.address !== undefined && (obj.address = message.address);
        return obj;
    },
    create(base) {
        return GatewayAddressResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGatewayAddressResponse();
        message.address = object.address ?? "";
        return message;
    },
};
function createBaseBytecodeRequest() {
    return { chain: "", contract: "" };
}
export const BytecodeRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.chain !== "") {
            writer.uint32(10).string(message.chain);
        }
        if (message.contract !== "") {
            writer.uint32(18).string(message.contract);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBytecodeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chain = reader.string();
                    break;
                case 2:
                    message.contract = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            chain: isSet(object.chain) ? String(object.chain) : "",
            contract: isSet(object.contract) ? String(object.contract) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.chain !== undefined && (obj.chain = message.chain);
        message.contract !== undefined && (obj.contract = message.contract);
        return obj;
    },
    create(base) {
        return BytecodeRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBytecodeRequest();
        message.chain = object.chain ?? "";
        message.contract = object.contract ?? "";
        return message;
    },
};
function createBaseBytecodeResponse() {
    return { bytecode: "" };
}
export const BytecodeResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.bytecode !== "") {
            writer.uint32(10).string(message.bytecode);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBytecodeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bytecode = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { bytecode: isSet(object.bytecode) ? String(object.bytecode) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.bytecode !== undefined && (obj.bytecode = message.bytecode);
        return obj;
    },
    create(base) {
        return BytecodeResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBytecodeResponse();
        message.bytecode = object.bytecode ?? "";
        return message;
    },
};
function createBaseERC20TokensRequest() {
    return { chain: "", type: 0 };
}
export const ERC20TokensRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.chain !== "") {
            writer.uint32(10).string(message.chain);
        }
        if (message.type !== 0) {
            writer.uint32(16).int32(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseERC20TokensRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chain = reader.string();
                    break;
                case 2:
                    message.type = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            chain: isSet(object.chain) ? String(object.chain) : "",
            type: isSet(object.type) ? tokenTypeFromJSON(object.type) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.chain !== undefined && (obj.chain = message.chain);
        message.type !== undefined && (obj.type = tokenTypeToJSON(message.type));
        return obj;
    },
    create(base) {
        return ERC20TokensRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseERC20TokensRequest();
        message.chain = object.chain ?? "";
        message.type = object.type ?? 0;
        return message;
    },
};
function createBaseERC20TokensResponse() {
    return { tokens: [] };
}
export const ERC20TokensResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.tokens) {
            ERC20TokensResponse_Token.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseERC20TokensResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.tokens.push(ERC20TokensResponse_Token.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            tokens: Array.isArray(object?.tokens) ? object.tokens.map((e) => ERC20TokensResponse_Token.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.tokens) {
            obj.tokens = message.tokens.map((e) => e ? ERC20TokensResponse_Token.toJSON(e) : undefined);
        }
        else {
            obj.tokens = [];
        }
        return obj;
    },
    create(base) {
        return ERC20TokensResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseERC20TokensResponse();
        message.tokens = object.tokens?.map((e) => ERC20TokensResponse_Token.fromPartial(e)) || [];
        return message;
    },
};
function createBaseERC20TokensResponse_Token() {
    return { asset: "", symbol: "" };
}
export const ERC20TokensResponse_Token = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.asset !== "") {
            writer.uint32(10).string(message.asset);
        }
        if (message.symbol !== "") {
            writer.uint32(18).string(message.symbol);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseERC20TokensResponse_Token();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.asset = reader.string();
                    break;
                case 2:
                    message.symbol = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            asset: isSet(object.asset) ? String(object.asset) : "",
            symbol: isSet(object.symbol) ? String(object.symbol) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.asset !== undefined && (obj.asset = message.asset);
        message.symbol !== undefined && (obj.symbol = message.symbol);
        return obj;
    },
    create(base) {
        return ERC20TokensResponse_Token.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseERC20TokensResponse_Token();
        message.asset = object.asset ?? "";
        message.symbol = object.symbol ?? "";
        return message;
    },
};
function createBaseTokenInfoRequest() {
    return { chain: "", asset: undefined, symbol: undefined, address: undefined };
}
export const TokenInfoRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.chain !== "") {
            writer.uint32(10).string(message.chain);
        }
        if (message.asset !== undefined) {
            writer.uint32(18).string(message.asset);
        }
        if (message.symbol !== undefined) {
            writer.uint32(26).string(message.symbol);
        }
        if (message.address !== undefined) {
            writer.uint32(34).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTokenInfoRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chain = reader.string();
                    break;
                case 2:
                    message.asset = reader.string();
                    break;
                case 3:
                    message.symbol = reader.string();
                    break;
                case 4:
                    message.address = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            chain: isSet(object.chain) ? String(object.chain) : "",
            asset: isSet(object.asset) ? String(object.asset) : undefined,
            symbol: isSet(object.symbol) ? String(object.symbol) : undefined,
            address: isSet(object.address) ? String(object.address) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.chain !== undefined && (obj.chain = message.chain);
        message.asset !== undefined && (obj.asset = message.asset);
        message.symbol !== undefined && (obj.symbol = message.symbol);
        message.address !== undefined && (obj.address = message.address);
        return obj;
    },
    create(base) {
        return TokenInfoRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTokenInfoRequest();
        message.chain = object.chain ?? "";
        message.asset = object.asset ?? undefined;
        message.symbol = object.symbol ?? undefined;
        message.address = object.address ?? undefined;
        return message;
    },
};
function createBaseTokenInfoResponse() {
    return { asset: "", details: undefined, address: "", confirmed: false, isExternal: false, burnerCodeHash: "" };
}
export const TokenInfoResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.asset !== "") {
            writer.uint32(10).string(message.asset);
        }
        if (message.details !== undefined) {
            TokenDetails.encode(message.details, writer.uint32(18).fork()).ldelim();
        }
        if (message.address !== "") {
            writer.uint32(26).string(message.address);
        }
        if (message.confirmed === true) {
            writer.uint32(32).bool(message.confirmed);
        }
        if (message.isExternal === true) {
            writer.uint32(40).bool(message.isExternal);
        }
        if (message.burnerCodeHash !== "") {
            writer.uint32(50).string(message.burnerCodeHash);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTokenInfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.asset = reader.string();
                    break;
                case 2:
                    message.details = TokenDetails.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.address = reader.string();
                    break;
                case 4:
                    message.confirmed = reader.bool();
                    break;
                case 5:
                    message.isExternal = reader.bool();
                    break;
                case 6:
                    message.burnerCodeHash = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            asset: isSet(object.asset) ? String(object.asset) : "",
            details: isSet(object.details) ? TokenDetails.fromJSON(object.details) : undefined,
            address: isSet(object.address) ? String(object.address) : "",
            confirmed: isSet(object.confirmed) ? Boolean(object.confirmed) : false,
            isExternal: isSet(object.isExternal) ? Boolean(object.isExternal) : false,
            burnerCodeHash: isSet(object.burnerCodeHash) ? String(object.burnerCodeHash) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.asset !== undefined && (obj.asset = message.asset);
        message.details !== undefined && (obj.details = message.details ? TokenDetails.toJSON(message.details) : undefined);
        message.address !== undefined && (obj.address = message.address);
        message.confirmed !== undefined && (obj.confirmed = message.confirmed);
        message.isExternal !== undefined && (obj.isExternal = message.isExternal);
        message.burnerCodeHash !== undefined && (obj.burnerCodeHash = message.burnerCodeHash);
        return obj;
    },
    create(base) {
        return TokenInfoResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTokenInfoResponse();
        message.asset = object.asset ?? "";
        message.details = (object.details !== undefined && object.details !== null)
            ? TokenDetails.fromPartial(object.details)
            : undefined;
        message.address = object.address ?? "";
        message.confirmed = object.confirmed ?? false;
        message.isExternal = object.isExternal ?? false;
        message.burnerCodeHash = object.burnerCodeHash ?? "";
        return message;
    },
};
function createBaseProof() {
    return { addresses: [], weights: [], threshold: "", signatures: [] };
}
export const Proof = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.addresses) {
            writer.uint32(10).string(v);
        }
        for (const v of message.weights) {
            writer.uint32(18).string(v);
        }
        if (message.threshold !== "") {
            writer.uint32(26).string(message.threshold);
        }
        for (const v of message.signatures) {
            writer.uint32(34).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProof();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.addresses.push(reader.string());
                    break;
                case 2:
                    message.weights.push(reader.string());
                    break;
                case 3:
                    message.threshold = reader.string();
                    break;
                case 4:
                    message.signatures.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            addresses: Array.isArray(object?.addresses) ? object.addresses.map((e) => String(e)) : [],
            weights: Array.isArray(object?.weights) ? object.weights.map((e) => String(e)) : [],
            threshold: isSet(object.threshold) ? String(object.threshold) : "",
            signatures: Array.isArray(object?.signatures) ? object.signatures.map((e) => String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.addresses) {
            obj.addresses = message.addresses.map((e) => e);
        }
        else {
            obj.addresses = [];
        }
        if (message.weights) {
            obj.weights = message.weights.map((e) => e);
        }
        else {
            obj.weights = [];
        }
        message.threshold !== undefined && (obj.threshold = message.threshold);
        if (message.signatures) {
            obj.signatures = message.signatures.map((e) => e);
        }
        else {
            obj.signatures = [];
        }
        return obj;
    },
    create(base) {
        return Proof.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseProof();
        message.addresses = object.addresses?.map((e) => e) || [];
        message.weights = object.weights?.map((e) => e) || [];
        message.threshold = object.threshold ?? "";
        message.signatures = object.signatures?.map((e) => e) || [];
        return message;
    },
};
var tsProtoGlobalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (tsProtoGlobalThis.Buffer) {
        return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = tsProtoGlobalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (tsProtoGlobalThis.Buffer) {
        return tsProtoGlobalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return tsProtoGlobalThis.btoa(bin.join(""));
    }
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
