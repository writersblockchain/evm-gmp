import Long from "long";
import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "axelar.snapshot.exported.v1beta1";
export interface Participant {
    address: Uint8Array;
    weight: Uint8Array;
}
export interface Snapshot {
    timestamp?: Date;
    height: Long;
    participants: {
        [key: string]: Participant;
    };
    bondedWeight: Uint8Array;
}
export interface Snapshot_ParticipantsEntry {
    key: string;
    value?: Participant;
}
export declare const Participant: {
    encode(message: Participant, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Participant;
    fromJSON(object: any): Participant;
    toJSON(message: Participant): unknown;
    create<I extends {
        address?: Uint8Array | undefined;
        weight?: Uint8Array | undefined;
    } & {
        address?: Uint8Array | undefined;
        weight?: Uint8Array | undefined;
    } & { [K in Exclude<keyof I, keyof Participant>]: never; }>(base?: I | undefined): Participant;
    fromPartial<I_1 extends {
        address?: Uint8Array | undefined;
        weight?: Uint8Array | undefined;
    } & {
        address?: Uint8Array | undefined;
        weight?: Uint8Array | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof Participant>]: never; }>(object: I_1): Participant;
};
export declare const Snapshot: {
    encode(message: Snapshot, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Snapshot;
    fromJSON(object: any): Snapshot;
    toJSON(message: Snapshot): unknown;
    create<I extends {
        timestamp?: Date | undefined;
        height?: string | number | Long | undefined;
        participants?: {
            [x: string]: {
                address?: Uint8Array | undefined;
                weight?: Uint8Array | undefined;
            } | undefined;
        } | undefined;
        bondedWeight?: Uint8Array | undefined;
    } & {
        timestamp?: Date | undefined;
        height?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K in Exclude<keyof I["height"], keyof Long>]: never; }) | undefined;
        participants?: ({
            [x: string]: {
                address?: Uint8Array | undefined;
                weight?: Uint8Array | undefined;
            } | undefined;
        } & {
            [x: string]: ({
                address?: Uint8Array | undefined;
                weight?: Uint8Array | undefined;
            } & {
                address?: Uint8Array | undefined;
                weight?: Uint8Array | undefined;
            } & { [K_1 in Exclude<keyof I["participants"][string], keyof Participant>]: never; }) | undefined;
        } & { [K_2 in Exclude<keyof I["participants"], string | number>]: never; }) | undefined;
        bondedWeight?: Uint8Array | undefined;
    } & { [K_3 in Exclude<keyof I, keyof Snapshot>]: never; }>(base?: I | undefined): Snapshot;
    fromPartial<I_1 extends {
        timestamp?: Date | undefined;
        height?: string | number | Long | undefined;
        participants?: {
            [x: string]: {
                address?: Uint8Array | undefined;
                weight?: Uint8Array | undefined;
            } | undefined;
        } | undefined;
        bondedWeight?: Uint8Array | undefined;
    } & {
        timestamp?: Date | undefined;
        height?: string | number | (Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long) => Long;
            and: (other: string | number | Long) => Long;
            compare: (other: string | number | Long) => number;
            comp: (other: string | number | Long) => number;
            divide: (divisor: string | number | Long) => Long;
            div: (divisor: string | number | Long) => Long;
            equals: (other: string | number | Long) => boolean;
            eq: (other: string | number | Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long) => boolean;
            gt: (other: string | number | Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long) => boolean;
            gte: (other: string | number | Long) => boolean;
            ge: (other: string | number | Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            eqz: () => boolean;
            lessThan: (other: string | number | Long) => boolean;
            lt: (other: string | number | Long) => boolean;
            lessThanOrEqual: (other: string | number | Long) => boolean;
            lte: (other: string | number | Long) => boolean;
            le: (other: string | number | Long) => boolean;
            modulo: (other: string | number | Long) => Long;
            mod: (other: string | number | Long) => Long;
            rem: (other: string | number | Long) => Long;
            multiply: (multiplier: string | number | Long) => Long;
            mul: (multiplier: string | number | Long) => Long;
            negate: () => Long;
            neg: () => Long;
            not: () => Long;
            countLeadingZeros: () => number;
            clz: () => number;
            countTrailingZeros: () => number;
            ctz: () => number;
            notEquals: (other: string | number | Long) => boolean;
            neq: (other: string | number | Long) => boolean;
            ne: (other: string | number | Long) => boolean;
            or: (other: string | number | Long) => Long;
            shiftLeft: (numBits: number | Long) => Long;
            shl: (numBits: number | Long) => Long;
            shiftRight: (numBits: number | Long) => Long;
            shr: (numBits: number | Long) => Long;
            shiftRightUnsigned: (numBits: number | Long) => Long;
            shru: (numBits: number | Long) => Long;
            shr_u: (numBits: number | Long) => Long;
            rotateLeft: (numBits: number | Long) => Long;
            rotl: (numBits: number | Long) => Long;
            rotateRight: (numBits: number | Long) => Long;
            rotr: (numBits: number | Long) => Long;
            subtract: (subtrahend: string | number | Long) => Long;
            sub: (subtrahend: string | number | Long) => Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long;
            xor: (other: string | number | Long) => Long;
        } & { [K_4 in Exclude<keyof I_1["height"], keyof Long>]: never; }) | undefined;
        participants?: ({
            [x: string]: {
                address?: Uint8Array | undefined;
                weight?: Uint8Array | undefined;
            } | undefined;
        } & {
            [x: string]: ({
                address?: Uint8Array | undefined;
                weight?: Uint8Array | undefined;
            } & {
                address?: Uint8Array | undefined;
                weight?: Uint8Array | undefined;
            } & { [K_5 in Exclude<keyof I_1["participants"][string], keyof Participant>]: never; }) | undefined;
        } & { [K_6 in Exclude<keyof I_1["participants"], string | number>]: never; }) | undefined;
        bondedWeight?: Uint8Array | undefined;
    } & { [K_7 in Exclude<keyof I_1, keyof Snapshot>]: never; }>(object: I_1): Snapshot;
};
export declare const Snapshot_ParticipantsEntry: {
    encode(message: Snapshot_ParticipantsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Snapshot_ParticipantsEntry;
    fromJSON(object: any): Snapshot_ParticipantsEntry;
    toJSON(message: Snapshot_ParticipantsEntry): unknown;
    create<I extends {
        key?: string | undefined;
        value?: {
            address?: Uint8Array | undefined;
            weight?: Uint8Array | undefined;
        } | undefined;
    } & {
        key?: string | undefined;
        value?: ({
            address?: Uint8Array | undefined;
            weight?: Uint8Array | undefined;
        } & {
            address?: Uint8Array | undefined;
            weight?: Uint8Array | undefined;
        } & { [K in Exclude<keyof I["value"], keyof Participant>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, keyof Snapshot_ParticipantsEntry>]: never; }>(base?: I | undefined): Snapshot_ParticipantsEntry;
    fromPartial<I_1 extends {
        key?: string | undefined;
        value?: {
            address?: Uint8Array | undefined;
            weight?: Uint8Array | undefined;
        } | undefined;
    } & {
        key?: string | undefined;
        value?: ({
            address?: Uint8Array | undefined;
            weight?: Uint8Array | undefined;
        } & {
            address?: Uint8Array | undefined;
            weight?: Uint8Array | undefined;
        } & { [K_2 in Exclude<keyof I_1["value"], keyof Participant>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, keyof Snapshot_ParticipantsEntry>]: never; }>(object: I_1): Snapshot_ParticipantsEntry;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
