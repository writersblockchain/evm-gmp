/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { Duration } from "../../../google/protobuf/duration";
import { CrossChainAddress } from "../exported/v1beta1/types";
export const protobufPackage = "axelar.nexus.v1beta1";
function createBaseFeeDeducted() {
    return { transferId: Long.UZERO, recipientChain: "", recipientAddress: "", amount: undefined, fee: undefined };
}
export const FeeDeducted = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.transferId.isZero()) {
            writer.uint32(8).uint64(message.transferId);
        }
        if (message.recipientChain !== "") {
            writer.uint32(18).string(message.recipientChain);
        }
        if (message.recipientAddress !== "") {
            writer.uint32(26).string(message.recipientAddress);
        }
        if (message.amount !== undefined) {
            Coin.encode(message.amount, writer.uint32(34).fork()).ldelim();
        }
        if (message.fee !== undefined) {
            Coin.encode(message.fee, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFeeDeducted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.transferId = reader.uint64();
                    break;
                case 2:
                    message.recipientChain = reader.string();
                    break;
                case 3:
                    message.recipientAddress = reader.string();
                    break;
                case 4:
                    message.amount = Coin.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.fee = Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            transferId: isSet(object.transferId) ? Long.fromValue(object.transferId) : Long.UZERO,
            recipientChain: isSet(object.recipientChain) ? String(object.recipientChain) : "",
            recipientAddress: isSet(object.recipientAddress) ? String(object.recipientAddress) : "",
            amount: isSet(object.amount) ? Coin.fromJSON(object.amount) : undefined,
            fee: isSet(object.fee) ? Coin.fromJSON(object.fee) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.transferId !== undefined && (obj.transferId = (message.transferId || Long.UZERO).toString());
        message.recipientChain !== undefined && (obj.recipientChain = message.recipientChain);
        message.recipientAddress !== undefined && (obj.recipientAddress = message.recipientAddress);
        message.amount !== undefined && (obj.amount = message.amount ? Coin.toJSON(message.amount) : undefined);
        message.fee !== undefined && (obj.fee = message.fee ? Coin.toJSON(message.fee) : undefined);
        return obj;
    },
    create(base) {
        return FeeDeducted.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFeeDeducted();
        message.transferId = (object.transferId !== undefined && object.transferId !== null)
            ? Long.fromValue(object.transferId)
            : Long.UZERO;
        message.recipientChain = object.recipientChain ?? "";
        message.recipientAddress = object.recipientAddress ?? "";
        message.amount = (object.amount !== undefined && object.amount !== null)
            ? Coin.fromPartial(object.amount)
            : undefined;
        message.fee = (object.fee !== undefined && object.fee !== null) ? Coin.fromPartial(object.fee) : undefined;
        return message;
    },
};
function createBaseInsufficientFee() {
    return { transferId: Long.UZERO, recipientChain: "", recipientAddress: "", amount: undefined, fee: undefined };
}
export const InsufficientFee = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.transferId.isZero()) {
            writer.uint32(8).uint64(message.transferId);
        }
        if (message.recipientChain !== "") {
            writer.uint32(18).string(message.recipientChain);
        }
        if (message.recipientAddress !== "") {
            writer.uint32(26).string(message.recipientAddress);
        }
        if (message.amount !== undefined) {
            Coin.encode(message.amount, writer.uint32(34).fork()).ldelim();
        }
        if (message.fee !== undefined) {
            Coin.encode(message.fee, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInsufficientFee();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.transferId = reader.uint64();
                    break;
                case 2:
                    message.recipientChain = reader.string();
                    break;
                case 3:
                    message.recipientAddress = reader.string();
                    break;
                case 4:
                    message.amount = Coin.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.fee = Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            transferId: isSet(object.transferId) ? Long.fromValue(object.transferId) : Long.UZERO,
            recipientChain: isSet(object.recipientChain) ? String(object.recipientChain) : "",
            recipientAddress: isSet(object.recipientAddress) ? String(object.recipientAddress) : "",
            amount: isSet(object.amount) ? Coin.fromJSON(object.amount) : undefined,
            fee: isSet(object.fee) ? Coin.fromJSON(object.fee) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.transferId !== undefined && (obj.transferId = (message.transferId || Long.UZERO).toString());
        message.recipientChain !== undefined && (obj.recipientChain = message.recipientChain);
        message.recipientAddress !== undefined && (obj.recipientAddress = message.recipientAddress);
        message.amount !== undefined && (obj.amount = message.amount ? Coin.toJSON(message.amount) : undefined);
        message.fee !== undefined && (obj.fee = message.fee ? Coin.toJSON(message.fee) : undefined);
        return obj;
    },
    create(base) {
        return InsufficientFee.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseInsufficientFee();
        message.transferId = (object.transferId !== undefined && object.transferId !== null)
            ? Long.fromValue(object.transferId)
            : Long.UZERO;
        message.recipientChain = object.recipientChain ?? "";
        message.recipientAddress = object.recipientAddress ?? "";
        message.amount = (object.amount !== undefined && object.amount !== null)
            ? Coin.fromPartial(object.amount)
            : undefined;
        message.fee = (object.fee !== undefined && object.fee !== null) ? Coin.fromPartial(object.fee) : undefined;
        return message;
    },
};
function createBaseRateLimitUpdated() {
    return { chain: "", limit: undefined, window: undefined };
}
export const RateLimitUpdated = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.chain !== "") {
            writer.uint32(10).string(message.chain);
        }
        if (message.limit !== undefined) {
            Coin.encode(message.limit, writer.uint32(18).fork()).ldelim();
        }
        if (message.window !== undefined) {
            Duration.encode(message.window, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRateLimitUpdated();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chain = reader.string();
                    break;
                case 2:
                    message.limit = Coin.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.window = Duration.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            chain: isSet(object.chain) ? String(object.chain) : "",
            limit: isSet(object.limit) ? Coin.fromJSON(object.limit) : undefined,
            window: isSet(object.window) ? Duration.fromJSON(object.window) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.chain !== undefined && (obj.chain = message.chain);
        message.limit !== undefined && (obj.limit = message.limit ? Coin.toJSON(message.limit) : undefined);
        message.window !== undefined && (obj.window = message.window ? Duration.toJSON(message.window) : undefined);
        return obj;
    },
    create(base) {
        return RateLimitUpdated.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRateLimitUpdated();
        message.chain = object.chain ?? "";
        message.limit = (object.limit !== undefined && object.limit !== null) ? Coin.fromPartial(object.limit) : undefined;
        message.window = (object.window !== undefined && object.window !== null)
            ? Duration.fromPartial(object.window)
            : undefined;
        return message;
    },
};
function createBaseMessageReceived() {
    return { id: "", payloadHash: new Uint8Array(), sender: undefined, recipient: undefined };
}
export const MessageReceived = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.payloadHash.length !== 0) {
            writer.uint32(18).bytes(message.payloadHash);
        }
        if (message.sender !== undefined) {
            CrossChainAddress.encode(message.sender, writer.uint32(26).fork()).ldelim();
        }
        if (message.recipient !== undefined) {
            CrossChainAddress.encode(message.recipient, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMessageReceived();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.payloadHash = reader.bytes();
                    break;
                case 3:
                    message.sender = CrossChainAddress.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.recipient = CrossChainAddress.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            payloadHash: isSet(object.payloadHash) ? bytesFromBase64(object.payloadHash) : new Uint8Array(),
            sender: isSet(object.sender) ? CrossChainAddress.fromJSON(object.sender) : undefined,
            recipient: isSet(object.recipient) ? CrossChainAddress.fromJSON(object.recipient) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.payloadHash !== undefined &&
            (obj.payloadHash = base64FromBytes(message.payloadHash !== undefined ? message.payloadHash : new Uint8Array()));
        message.sender !== undefined &&
            (obj.sender = message.sender ? CrossChainAddress.toJSON(message.sender) : undefined);
        message.recipient !== undefined &&
            (obj.recipient = message.recipient ? CrossChainAddress.toJSON(message.recipient) : undefined);
        return obj;
    },
    create(base) {
        return MessageReceived.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMessageReceived();
        message.id = object.id ?? "";
        message.payloadHash = object.payloadHash ?? new Uint8Array();
        message.sender = (object.sender !== undefined && object.sender !== null)
            ? CrossChainAddress.fromPartial(object.sender)
            : undefined;
        message.recipient = (object.recipient !== undefined && object.recipient !== null)
            ? CrossChainAddress.fromPartial(object.recipient)
            : undefined;
        return message;
    },
};
function createBaseMessageProcessing() {
    return { id: "" };
}
export const MessageProcessing = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMessageProcessing();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        return obj;
    },
    create(base) {
        return MessageProcessing.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMessageProcessing();
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseMessageExecuted() {
    return { id: "" };
}
export const MessageExecuted = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMessageExecuted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        return obj;
    },
    create(base) {
        return MessageExecuted.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMessageExecuted();
        message.id = object.id ?? "";
        return message;
    },
};
function createBaseMessageFailed() {
    return { id: "" };
}
export const MessageFailed = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMessageFailed();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        return obj;
    },
    create(base) {
        return MessageFailed.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMessageFailed();
        message.id = object.id ?? "";
        return message;
    },
};
var tsProtoGlobalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (tsProtoGlobalThis.Buffer) {
        return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = tsProtoGlobalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (tsProtoGlobalThis.Buffer) {
        return tsProtoGlobalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return tsProtoGlobalThis.btoa(bin.join(""));
    }
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
