/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { AssetsRequest, AssetsResponse, ChainMaintainersRequest, ChainMaintainersResponse, ChainsByAssetRequest, ChainsByAssetResponse, ChainsRequest, ChainsResponse, ChainStateRequest, ChainStateResponse, FeeInfoRequest, FeeInfoResponse, LatestDepositAddressRequest, LatestDepositAddressResponse, MessageRequest, MessageResponse, RecipientAddressRequest, RecipientAddressResponse, TransferFeeRequest, TransferFeeResponse, TransferRateLimitRequest, TransferRateLimitResponse, TransfersForChainRequest, TransfersForChainResponse, } from "./query";
import { ActivateChainRequest, ActivateChainResponse, DeactivateChainRequest, DeactivateChainResponse, DeregisterChainMaintainerRequest, DeregisterChainMaintainerResponse, RegisterAssetFeeRequest, RegisterAssetFeeResponse, RegisterChainMaintainerRequest, RegisterChainMaintainerResponse, SetTransferRateLimitRequest, SetTransferRateLimitResponse, } from "./tx";
export const protobufPackage = "axelar.nexus.v1beta1";
export class MsgServiceClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "axelar.nexus.v1beta1.MsgService";
        this.rpc = rpc;
        this.RegisterChainMaintainer = this.RegisterChainMaintainer.bind(this);
        this.DeregisterChainMaintainer = this.DeregisterChainMaintainer.bind(this);
        this.ActivateChain = this.ActivateChain.bind(this);
        this.DeactivateChain = this.DeactivateChain.bind(this);
        this.RegisterAssetFee = this.RegisterAssetFee.bind(this);
        this.SetTransferRateLimit = this.SetTransferRateLimit.bind(this);
    }
    RegisterChainMaintainer(request) {
        const data = RegisterChainMaintainerRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RegisterChainMaintainer", data);
        return promise.then((data) => RegisterChainMaintainerResponse.decode(new _m0.Reader(data)));
    }
    DeregisterChainMaintainer(request) {
        const data = DeregisterChainMaintainerRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "DeregisterChainMaintainer", data);
        return promise.then((data) => DeregisterChainMaintainerResponse.decode(new _m0.Reader(data)));
    }
    ActivateChain(request) {
        const data = ActivateChainRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ActivateChain", data);
        return promise.then((data) => ActivateChainResponse.decode(new _m0.Reader(data)));
    }
    DeactivateChain(request) {
        const data = DeactivateChainRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "DeactivateChain", data);
        return promise.then((data) => DeactivateChainResponse.decode(new _m0.Reader(data)));
    }
    RegisterAssetFee(request) {
        const data = RegisterAssetFeeRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RegisterAssetFee", data);
        return promise.then((data) => RegisterAssetFeeResponse.decode(new _m0.Reader(data)));
    }
    SetTransferRateLimit(request) {
        const data = SetTransferRateLimitRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "SetTransferRateLimit", data);
        return promise.then((data) => SetTransferRateLimitResponse.decode(new _m0.Reader(data)));
    }
}
export class QueryServiceClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "axelar.nexus.v1beta1.QueryService";
        this.rpc = rpc;
        this.LatestDepositAddress = this.LatestDepositAddress.bind(this);
        this.TransfersForChain = this.TransfersForChain.bind(this);
        this.FeeInfo = this.FeeInfo.bind(this);
        this.TransferFee = this.TransferFee.bind(this);
        this.Chains = this.Chains.bind(this);
        this.Assets = this.Assets.bind(this);
        this.ChainState = this.ChainState.bind(this);
        this.ChainsByAsset = this.ChainsByAsset.bind(this);
        this.RecipientAddress = this.RecipientAddress.bind(this);
        this.ChainMaintainers = this.ChainMaintainers.bind(this);
        this.TransferRateLimit = this.TransferRateLimit.bind(this);
        this.Message = this.Message.bind(this);
    }
    LatestDepositAddress(request) {
        const data = LatestDepositAddressRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "LatestDepositAddress", data);
        return promise.then((data) => LatestDepositAddressResponse.decode(new _m0.Reader(data)));
    }
    TransfersForChain(request) {
        const data = TransfersForChainRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "TransfersForChain", data);
        return promise.then((data) => TransfersForChainResponse.decode(new _m0.Reader(data)));
    }
    FeeInfo(request) {
        const data = FeeInfoRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "FeeInfo", data);
        return promise.then((data) => FeeInfoResponse.decode(new _m0.Reader(data)));
    }
    TransferFee(request) {
        const data = TransferFeeRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "TransferFee", data);
        return promise.then((data) => TransferFeeResponse.decode(new _m0.Reader(data)));
    }
    Chains(request) {
        const data = ChainsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Chains", data);
        return promise.then((data) => ChainsResponse.decode(new _m0.Reader(data)));
    }
    Assets(request) {
        const data = AssetsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Assets", data);
        return promise.then((data) => AssetsResponse.decode(new _m0.Reader(data)));
    }
    ChainState(request) {
        const data = ChainStateRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ChainState", data);
        return promise.then((data) => ChainStateResponse.decode(new _m0.Reader(data)));
    }
    ChainsByAsset(request) {
        const data = ChainsByAssetRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ChainsByAsset", data);
        return promise.then((data) => ChainsByAssetResponse.decode(new _m0.Reader(data)));
    }
    RecipientAddress(request) {
        const data = RecipientAddressRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RecipientAddress", data);
        return promise.then((data) => RecipientAddressResponse.decode(new _m0.Reader(data)));
    }
    ChainMaintainers(request) {
        const data = ChainMaintainersRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ChainMaintainers", data);
        return promise.then((data) => ChainMaintainersResponse.decode(new _m0.Reader(data)));
    }
    TransferRateLimit(request) {
        const data = TransferRateLimitRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "TransferRateLimit", data);
        return promise.then((data) => TransferRateLimitResponse.decode(new _m0.Reader(data)));
    }
    Message(request) {
        const data = MessageRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Message", data);
        return promise.then((data) => MessageResponse.decode(new _m0.Reader(data)));
    }
}
