/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
export const protobufPackage = "axelar.utils.v1beta1";
function createBaseThreshold() {
    return { numerator: Long.ZERO, denominator: Long.ZERO };
}
export const Threshold = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.numerator.isZero()) {
            writer.uint32(8).int64(message.numerator);
        }
        if (!message.denominator.isZero()) {
            writer.uint32(16).int64(message.denominator);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseThreshold();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.numerator = reader.int64();
                    break;
                case 2:
                    message.denominator = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            numerator: isSet(object.numerator) ? Long.fromValue(object.numerator) : Long.ZERO,
            denominator: isSet(object.denominator) ? Long.fromValue(object.denominator) : Long.ZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.numerator !== undefined && (obj.numerator = (message.numerator || Long.ZERO).toString());
        message.denominator !== undefined && (obj.denominator = (message.denominator || Long.ZERO).toString());
        return obj;
    },
    create(base) {
        return Threshold.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseThreshold();
        message.numerator = (object.numerator !== undefined && object.numerator !== null)
            ? Long.fromValue(object.numerator)
            : Long.ZERO;
        message.denominator = (object.denominator !== undefined && object.denominator !== null)
            ? Long.fromValue(object.denominator)
            : Long.ZERO;
        return message;
    },
};
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
