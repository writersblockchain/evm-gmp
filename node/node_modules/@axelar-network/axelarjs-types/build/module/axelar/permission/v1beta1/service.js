/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { QueryGovernanceKeyRequest, QueryGovernanceKeyResponse } from "./query";
import { DeregisterControllerRequest, DeregisterControllerResponse, RegisterControllerRequest, RegisterControllerResponse, UpdateGovernanceKeyRequest, UpdateGovernanceKeyResponse, } from "./tx";
export const protobufPackage = "axelar.permission.v1beta1";
export class MsgClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "axelar.permission.v1beta1.Msg";
        this.rpc = rpc;
        this.RegisterController = this.RegisterController.bind(this);
        this.DeregisterController = this.DeregisterController.bind(this);
        this.UpdateGovernanceKey = this.UpdateGovernanceKey.bind(this);
    }
    RegisterController(request) {
        const data = RegisterControllerRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RegisterController", data);
        return promise.then((data) => RegisterControllerResponse.decode(new _m0.Reader(data)));
    }
    DeregisterController(request) {
        const data = DeregisterControllerRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "DeregisterController", data);
        return promise.then((data) => DeregisterControllerResponse.decode(new _m0.Reader(data)));
    }
    UpdateGovernanceKey(request) {
        const data = UpdateGovernanceKeyRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateGovernanceKey", data);
        return promise.then((data) => UpdateGovernanceKeyResponse.decode(new _m0.Reader(data)));
    }
}
export class QueryClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "axelar.permission.v1beta1.Query";
        this.rpc = rpc;
        this.GovernanceKey = this.GovernanceKey.bind(this);
    }
    GovernanceKey(request) {
        const data = QueryGovernanceKeyRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GovernanceKey", data);
        return promise.then((data) => QueryGovernanceKeyResponse.decode(new _m0.Reader(data)));
    }
}
