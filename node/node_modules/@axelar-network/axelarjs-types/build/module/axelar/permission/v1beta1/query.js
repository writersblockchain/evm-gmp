/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { LegacyAminoPubKey } from "../../../cosmos/crypto/multisig/keys";
export const protobufPackage = "axelar.permission.v1beta1";
function createBaseQueryGovernanceKeyRequest() {
    return {};
}
export const QueryGovernanceKeyRequest = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGovernanceKeyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return QueryGovernanceKeyRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseQueryGovernanceKeyRequest();
        return message;
    },
};
function createBaseQueryGovernanceKeyResponse() {
    return { governanceKey: undefined };
}
export const QueryGovernanceKeyResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.governanceKey !== undefined) {
            LegacyAminoPubKey.encode(message.governanceKey, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGovernanceKeyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.governanceKey = LegacyAminoPubKey.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            governanceKey: isSet(object.governanceKey) ? LegacyAminoPubKey.fromJSON(object.governanceKey) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.governanceKey !== undefined &&
            (obj.governanceKey = message.governanceKey ? LegacyAminoPubKey.toJSON(message.governanceKey) : undefined);
        return obj;
    },
    create(base) {
        return QueryGovernanceKeyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryGovernanceKeyResponse();
        message.governanceKey = (object.governanceKey !== undefined && object.governanceKey !== null)
            ? LegacyAminoPubKey.fromPartial(object.governanceKey)
            : undefined;
        return message;
    },
};
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
