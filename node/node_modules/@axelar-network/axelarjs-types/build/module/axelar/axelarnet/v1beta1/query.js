/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
export const protobufPackage = "axelar.axelarnet.v1beta1";
function createBasePendingIBCTransferCountRequest() {
    return {};
}
export const PendingIBCTransferCountRequest = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePendingIBCTransferCountRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return PendingIBCTransferCountRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBasePendingIBCTransferCountRequest();
        return message;
    },
};
function createBasePendingIBCTransferCountResponse() {
    return { transfersByChain: {} };
}
export const PendingIBCTransferCountResponse = {
    encode(message, writer = _m0.Writer.create()) {
        Object.entries(message.transfersByChain).forEach(([key, value]) => {
            PendingIBCTransferCountResponse_TransfersByChainEntry.encode({ key: key, value }, writer.uint32(10).fork())
                .ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePendingIBCTransferCountResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    const entry1 = PendingIBCTransferCountResponse_TransfersByChainEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.transfersByChain[entry1.key] = entry1.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            transfersByChain: isObject(object.transfersByChain)
                ? Object.entries(object.transfersByChain).reduce((acc, [key, value]) => {
                    acc[key] = Number(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        obj.transfersByChain = {};
        if (message.transfersByChain) {
            Object.entries(message.transfersByChain).forEach(([k, v]) => {
                obj.transfersByChain[k] = Math.round(v);
            });
        }
        return obj;
    },
    create(base) {
        return PendingIBCTransferCountResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePendingIBCTransferCountResponse();
        message.transfersByChain = Object.entries(object.transfersByChain ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = Number(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBasePendingIBCTransferCountResponse_TransfersByChainEntry() {
    return { key: "", value: 0 };
}
export const PendingIBCTransferCountResponse_TransfersByChainEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== 0) {
            writer.uint32(16).uint32(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePendingIBCTransferCountResponse_TransfersByChainEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? Number(object.value) : 0 };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = Math.round(message.value));
        return obj;
    },
    create(base) {
        return PendingIBCTransferCountResponse_TransfersByChainEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePendingIBCTransferCountResponse_TransfersByChainEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? 0;
        return message;
    },
};
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
