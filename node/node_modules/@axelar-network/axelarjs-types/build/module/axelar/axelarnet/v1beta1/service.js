/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { PendingIBCTransferCountRequest, PendingIBCTransferCountResponse } from "./query";
import { AddCosmosBasedChainRequest, AddCosmosBasedChainResponse, CallContractRequest, CallContractResponse, ConfirmDepositRequest, ConfirmDepositResponse, ExecutePendingTransfersRequest, ExecutePendingTransfersResponse, LinkRequest, LinkResponse, RegisterAssetRequest, RegisterAssetResponse, RegisterFeeCollectorRequest, RegisterFeeCollectorResponse, RetryIBCTransferRequest, RetryIBCTransferResponse, RouteIBCTransfersRequest, RouteIBCTransfersResponse, RouteMessageRequest, RouteMessageResponse, } from "./tx";
export const protobufPackage = "axelar.axelarnet.v1beta1";
export class MsgServiceClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "axelar.axelarnet.v1beta1.MsgService";
        this.rpc = rpc;
        this.Link = this.Link.bind(this);
        this.ConfirmDeposit = this.ConfirmDeposit.bind(this);
        this.ExecutePendingTransfers = this.ExecutePendingTransfers.bind(this);
        this.AddCosmosBasedChain = this.AddCosmosBasedChain.bind(this);
        this.RegisterAsset = this.RegisterAsset.bind(this);
        this.RouteIBCTransfers = this.RouteIBCTransfers.bind(this);
        this.RegisterFeeCollector = this.RegisterFeeCollector.bind(this);
        this.RetryIBCTransfer = this.RetryIBCTransfer.bind(this);
        this.RouteMessage = this.RouteMessage.bind(this);
        this.CallContract = this.CallContract.bind(this);
    }
    Link(request) {
        const data = LinkRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Link", data);
        return promise.then((data) => LinkResponse.decode(new _m0.Reader(data)));
    }
    ConfirmDeposit(request) {
        const data = ConfirmDepositRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ConfirmDeposit", data);
        return promise.then((data) => ConfirmDepositResponse.decode(new _m0.Reader(data)));
    }
    ExecutePendingTransfers(request) {
        const data = ExecutePendingTransfersRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ExecutePendingTransfers", data);
        return promise.then((data) => ExecutePendingTransfersResponse.decode(new _m0.Reader(data)));
    }
    AddCosmosBasedChain(request) {
        const data = AddCosmosBasedChainRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AddCosmosBasedChain", data);
        return promise.then((data) => AddCosmosBasedChainResponse.decode(new _m0.Reader(data)));
    }
    RegisterAsset(request) {
        const data = RegisterAssetRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RegisterAsset", data);
        return promise.then((data) => RegisterAssetResponse.decode(new _m0.Reader(data)));
    }
    RouteIBCTransfers(request) {
        const data = RouteIBCTransfersRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RouteIBCTransfers", data);
        return promise.then((data) => RouteIBCTransfersResponse.decode(new _m0.Reader(data)));
    }
    RegisterFeeCollector(request) {
        const data = RegisterFeeCollectorRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RegisterFeeCollector", data);
        return promise.then((data) => RegisterFeeCollectorResponse.decode(new _m0.Reader(data)));
    }
    RetryIBCTransfer(request) {
        const data = RetryIBCTransferRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RetryIBCTransfer", data);
        return promise.then((data) => RetryIBCTransferResponse.decode(new _m0.Reader(data)));
    }
    RouteMessage(request) {
        const data = RouteMessageRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RouteMessage", data);
        return promise.then((data) => RouteMessageResponse.decode(new _m0.Reader(data)));
    }
    CallContract(request) {
        const data = CallContractRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CallContract", data);
        return promise.then((data) => CallContractResponse.decode(new _m0.Reader(data)));
    }
}
export class QueryServiceClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "axelar.axelarnet.v1beta1.QueryService";
        this.rpc = rpc;
        this.PendingIBCTransferCount = this.PendingIBCTransferCount.bind(this);
    }
    PendingIBCTransferCount(request) {
        const data = PendingIBCTransferCountRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "PendingIBCTransferCount", data);
        return promise.then((data) => PendingIBCTransferCountResponse.decode(new _m0.Reader(data)));
    }
}
