/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
export const protobufPackage = "axelar.axelarnet.v1beta1";
function createBaseParams() {
    return { routeTimeoutWindow: Long.UZERO, transferLimit: Long.UZERO, endBlockerLimit: Long.UZERO };
}
export const Params = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.routeTimeoutWindow.isZero()) {
            writer.uint32(8).uint64(message.routeTimeoutWindow);
        }
        if (!message.transferLimit.isZero()) {
            writer.uint32(24).uint64(message.transferLimit);
        }
        if (!message.endBlockerLimit.isZero()) {
            writer.uint32(32).uint64(message.endBlockerLimit);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.routeTimeoutWindow = reader.uint64();
                    break;
                case 3:
                    message.transferLimit = reader.uint64();
                    break;
                case 4:
                    message.endBlockerLimit = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            routeTimeoutWindow: isSet(object.routeTimeoutWindow) ? Long.fromValue(object.routeTimeoutWindow) : Long.UZERO,
            transferLimit: isSet(object.transferLimit) ? Long.fromValue(object.transferLimit) : Long.UZERO,
            endBlockerLimit: isSet(object.endBlockerLimit) ? Long.fromValue(object.endBlockerLimit) : Long.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.routeTimeoutWindow !== undefined &&
            (obj.routeTimeoutWindow = (message.routeTimeoutWindow || Long.UZERO).toString());
        message.transferLimit !== undefined && (obj.transferLimit = (message.transferLimit || Long.UZERO).toString());
        message.endBlockerLimit !== undefined && (obj.endBlockerLimit = (message.endBlockerLimit || Long.UZERO).toString());
        return obj;
    },
    create(base) {
        return Params.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseParams();
        message.routeTimeoutWindow = (object.routeTimeoutWindow !== undefined && object.routeTimeoutWindow !== null)
            ? Long.fromValue(object.routeTimeoutWindow)
            : Long.UZERO;
        message.transferLimit = (object.transferLimit !== undefined && object.transferLimit !== null)
            ? Long.fromValue(object.transferLimit)
            : Long.UZERO;
        message.endBlockerLimit = (object.endBlockerLimit !== undefined && object.endBlockerLimit !== null)
            ? Long.fromValue(object.endBlockerLimit)
            : Long.UZERO;
        return message;
    },
};
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
