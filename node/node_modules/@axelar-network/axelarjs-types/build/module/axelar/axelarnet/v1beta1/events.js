/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
export const protobufPackage = "axelar.axelarnet.v1beta1";
function createBaseIBCTransferSent() {
    return {
        id: Long.UZERO,
        receipient: "",
        asset: undefined,
        sequence: Long.UZERO,
        portId: "",
        channelId: "",
        recipient: "",
    };
}
export const IBCTransferSent = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.id.isZero()) {
            writer.uint32(8).uint64(message.id);
        }
        if (message.receipient !== "") {
            writer.uint32(18).string(message.receipient);
        }
        if (message.asset !== undefined) {
            Coin.encode(message.asset, writer.uint32(26).fork()).ldelim();
        }
        if (!message.sequence.isZero()) {
            writer.uint32(32).uint64(message.sequence);
        }
        if (message.portId !== "") {
            writer.uint32(42).string(message.portId);
        }
        if (message.channelId !== "") {
            writer.uint32(50).string(message.channelId);
        }
        if (message.recipient !== "") {
            writer.uint32(58).string(message.recipient);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIBCTransferSent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                case 2:
                    message.receipient = reader.string();
                    break;
                case 3:
                    message.asset = Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.sequence = reader.uint64();
                    break;
                case 5:
                    message.portId = reader.string();
                    break;
                case 6:
                    message.channelId = reader.string();
                    break;
                case 7:
                    message.recipient = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,
            receipient: isSet(object.receipient) ? String(object.receipient) : "",
            asset: isSet(object.asset) ? Coin.fromJSON(object.asset) : undefined,
            sequence: isSet(object.sequence) ? Long.fromValue(object.sequence) : Long.UZERO,
            portId: isSet(object.portId) ? String(object.portId) : "",
            channelId: isSet(object.channelId) ? String(object.channelId) : "",
            recipient: isSet(object.recipient) ? String(object.recipient) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = (message.id || Long.UZERO).toString());
        message.receipient !== undefined && (obj.receipient = message.receipient);
        message.asset !== undefined && (obj.asset = message.asset ? Coin.toJSON(message.asset) : undefined);
        message.sequence !== undefined && (obj.sequence = (message.sequence || Long.UZERO).toString());
        message.portId !== undefined && (obj.portId = message.portId);
        message.channelId !== undefined && (obj.channelId = message.channelId);
        message.recipient !== undefined && (obj.recipient = message.recipient);
        return obj;
    },
    create(base) {
        return IBCTransferSent.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseIBCTransferSent();
        message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
        message.receipient = object.receipient ?? "";
        message.asset = (object.asset !== undefined && object.asset !== null) ? Coin.fromPartial(object.asset) : undefined;
        message.sequence = (object.sequence !== undefined && object.sequence !== null)
            ? Long.fromValue(object.sequence)
            : Long.UZERO;
        message.portId = object.portId ?? "";
        message.channelId = object.channelId ?? "";
        message.recipient = object.recipient ?? "";
        return message;
    },
};
function createBaseIBCTransferCompleted() {
    return { id: Long.UZERO, sequence: Long.UZERO, portId: "", channelId: "" };
}
export const IBCTransferCompleted = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.id.isZero()) {
            writer.uint32(8).uint64(message.id);
        }
        if (!message.sequence.isZero()) {
            writer.uint32(16).uint64(message.sequence);
        }
        if (message.portId !== "") {
            writer.uint32(26).string(message.portId);
        }
        if (message.channelId !== "") {
            writer.uint32(34).string(message.channelId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIBCTransferCompleted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                case 2:
                    message.sequence = reader.uint64();
                    break;
                case 3:
                    message.portId = reader.string();
                    break;
                case 4:
                    message.channelId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,
            sequence: isSet(object.sequence) ? Long.fromValue(object.sequence) : Long.UZERO,
            portId: isSet(object.portId) ? String(object.portId) : "",
            channelId: isSet(object.channelId) ? String(object.channelId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = (message.id || Long.UZERO).toString());
        message.sequence !== undefined && (obj.sequence = (message.sequence || Long.UZERO).toString());
        message.portId !== undefined && (obj.portId = message.portId);
        message.channelId !== undefined && (obj.channelId = message.channelId);
        return obj;
    },
    create(base) {
        return IBCTransferCompleted.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseIBCTransferCompleted();
        message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
        message.sequence = (object.sequence !== undefined && object.sequence !== null)
            ? Long.fromValue(object.sequence)
            : Long.UZERO;
        message.portId = object.portId ?? "";
        message.channelId = object.channelId ?? "";
        return message;
    },
};
function createBaseIBCTransferFailed() {
    return { id: Long.UZERO, sequence: Long.UZERO, portId: "", channelId: "" };
}
export const IBCTransferFailed = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.id.isZero()) {
            writer.uint32(8).uint64(message.id);
        }
        if (!message.sequence.isZero()) {
            writer.uint32(16).uint64(message.sequence);
        }
        if (message.portId !== "") {
            writer.uint32(26).string(message.portId);
        }
        if (message.channelId !== "") {
            writer.uint32(34).string(message.channelId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIBCTransferFailed();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                case 2:
                    message.sequence = reader.uint64();
                    break;
                case 3:
                    message.portId = reader.string();
                    break;
                case 4:
                    message.channelId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,
            sequence: isSet(object.sequence) ? Long.fromValue(object.sequence) : Long.UZERO,
            portId: isSet(object.portId) ? String(object.portId) : "",
            channelId: isSet(object.channelId) ? String(object.channelId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = (message.id || Long.UZERO).toString());
        message.sequence !== undefined && (obj.sequence = (message.sequence || Long.UZERO).toString());
        message.portId !== undefined && (obj.portId = message.portId);
        message.channelId !== undefined && (obj.channelId = message.channelId);
        return obj;
    },
    create(base) {
        return IBCTransferFailed.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseIBCTransferFailed();
        message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
        message.sequence = (object.sequence !== undefined && object.sequence !== null)
            ? Long.fromValue(object.sequence)
            : Long.UZERO;
        message.portId = object.portId ?? "";
        message.channelId = object.channelId ?? "";
        return message;
    },
};
function createBaseIBCTransferRetried() {
    return {
        id: Long.UZERO,
        receipient: "",
        asset: undefined,
        sequence: Long.UZERO,
        portId: "",
        channelId: "",
        recipient: "",
    };
}
export const IBCTransferRetried = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.id.isZero()) {
            writer.uint32(8).uint64(message.id);
        }
        if (message.receipient !== "") {
            writer.uint32(18).string(message.receipient);
        }
        if (message.asset !== undefined) {
            Coin.encode(message.asset, writer.uint32(26).fork()).ldelim();
        }
        if (!message.sequence.isZero()) {
            writer.uint32(32).uint64(message.sequence);
        }
        if (message.portId !== "") {
            writer.uint32(42).string(message.portId);
        }
        if (message.channelId !== "") {
            writer.uint32(50).string(message.channelId);
        }
        if (message.recipient !== "") {
            writer.uint32(58).string(message.recipient);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIBCTransferRetried();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                case 2:
                    message.receipient = reader.string();
                    break;
                case 3:
                    message.asset = Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.sequence = reader.uint64();
                    break;
                case 5:
                    message.portId = reader.string();
                    break;
                case 6:
                    message.channelId = reader.string();
                    break;
                case 7:
                    message.recipient = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,
            receipient: isSet(object.receipient) ? String(object.receipient) : "",
            asset: isSet(object.asset) ? Coin.fromJSON(object.asset) : undefined,
            sequence: isSet(object.sequence) ? Long.fromValue(object.sequence) : Long.UZERO,
            portId: isSet(object.portId) ? String(object.portId) : "",
            channelId: isSet(object.channelId) ? String(object.channelId) : "",
            recipient: isSet(object.recipient) ? String(object.recipient) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = (message.id || Long.UZERO).toString());
        message.receipient !== undefined && (obj.receipient = message.receipient);
        message.asset !== undefined && (obj.asset = message.asset ? Coin.toJSON(message.asset) : undefined);
        message.sequence !== undefined && (obj.sequence = (message.sequence || Long.UZERO).toString());
        message.portId !== undefined && (obj.portId = message.portId);
        message.channelId !== undefined && (obj.channelId = message.channelId);
        message.recipient !== undefined && (obj.recipient = message.recipient);
        return obj;
    },
    create(base) {
        return IBCTransferRetried.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseIBCTransferRetried();
        message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
        message.receipient = object.receipient ?? "";
        message.asset = (object.asset !== undefined && object.asset !== null) ? Coin.fromPartial(object.asset) : undefined;
        message.sequence = (object.sequence !== undefined && object.sequence !== null)
            ? Long.fromValue(object.sequence)
            : Long.UZERO;
        message.portId = object.portId ?? "";
        message.channelId = object.channelId ?? "";
        message.recipient = object.recipient ?? "";
        return message;
    },
};
function createBaseAxelarTransferCompleted() {
    return { id: Long.UZERO, receipient: "", asset: undefined, recipient: "" };
}
export const AxelarTransferCompleted = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.id.isZero()) {
            writer.uint32(8).uint64(message.id);
        }
        if (message.receipient !== "") {
            writer.uint32(18).string(message.receipient);
        }
        if (message.asset !== undefined) {
            Coin.encode(message.asset, writer.uint32(26).fork()).ldelim();
        }
        if (message.recipient !== "") {
            writer.uint32(34).string(message.recipient);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAxelarTransferCompleted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                case 2:
                    message.receipient = reader.string();
                    break;
                case 3:
                    message.asset = Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.recipient = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? Long.fromValue(object.id) : Long.UZERO,
            receipient: isSet(object.receipient) ? String(object.receipient) : "",
            asset: isSet(object.asset) ? Coin.fromJSON(object.asset) : undefined,
            recipient: isSet(object.recipient) ? String(object.recipient) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = (message.id || Long.UZERO).toString());
        message.receipient !== undefined && (obj.receipient = message.receipient);
        message.asset !== undefined && (obj.asset = message.asset ? Coin.toJSON(message.asset) : undefined);
        message.recipient !== undefined && (obj.recipient = message.recipient);
        return obj;
    },
    create(base) {
        return AxelarTransferCompleted.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAxelarTransferCompleted();
        message.id = (object.id !== undefined && object.id !== null) ? Long.fromValue(object.id) : Long.UZERO;
        message.receipient = object.receipient ?? "";
        message.asset = (object.asset !== undefined && object.asset !== null) ? Coin.fromPartial(object.asset) : undefined;
        message.recipient = object.recipient ?? "";
        return message;
    },
};
function createBaseFeeCollected() {
    return { collector: new Uint8Array(), fee: undefined };
}
export const FeeCollected = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.collector.length !== 0) {
            writer.uint32(10).bytes(message.collector);
        }
        if (message.fee !== undefined) {
            Coin.encode(message.fee, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFeeCollected();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.collector = reader.bytes();
                    break;
                case 2:
                    message.fee = Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            collector: isSet(object.collector) ? bytesFromBase64(object.collector) : new Uint8Array(),
            fee: isSet(object.fee) ? Coin.fromJSON(object.fee) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.collector !== undefined &&
            (obj.collector = base64FromBytes(message.collector !== undefined ? message.collector : new Uint8Array()));
        message.fee !== undefined && (obj.fee = message.fee ? Coin.toJSON(message.fee) : undefined);
        return obj;
    },
    create(base) {
        return FeeCollected.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFeeCollected();
        message.collector = object.collector ?? new Uint8Array();
        message.fee = (object.fee !== undefined && object.fee !== null) ? Coin.fromPartial(object.fee) : undefined;
        return message;
    },
};
function createBaseFeePaid() {
    return { messageId: "", recipient: new Uint8Array(), fee: undefined };
}
export const FeePaid = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.messageId !== "") {
            writer.uint32(10).string(message.messageId);
        }
        if (message.recipient.length !== 0) {
            writer.uint32(18).bytes(message.recipient);
        }
        if (message.fee !== undefined) {
            Coin.encode(message.fee, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFeePaid();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.messageId = reader.string();
                    break;
                case 2:
                    message.recipient = reader.bytes();
                    break;
                case 3:
                    message.fee = Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            messageId: isSet(object.messageId) ? String(object.messageId) : "",
            recipient: isSet(object.recipient) ? bytesFromBase64(object.recipient) : new Uint8Array(),
            fee: isSet(object.fee) ? Coin.fromJSON(object.fee) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.messageId !== undefined && (obj.messageId = message.messageId);
        message.recipient !== undefined &&
            (obj.recipient = base64FromBytes(message.recipient !== undefined ? message.recipient : new Uint8Array()));
        message.fee !== undefined && (obj.fee = message.fee ? Coin.toJSON(message.fee) : undefined);
        return obj;
    },
    create(base) {
        return FeePaid.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFeePaid();
        message.messageId = object.messageId ?? "";
        message.recipient = object.recipient ?? new Uint8Array();
        message.fee = (object.fee !== undefined && object.fee !== null) ? Coin.fromPartial(object.fee) : undefined;
        return message;
    },
};
function createBaseContractCallSubmitted() {
    return {
        messageId: "",
        sender: "",
        sourceChain: "",
        destinationChain: "",
        contractAddress: "",
        payload: new Uint8Array(),
        payloadHash: new Uint8Array(),
    };
}
export const ContractCallSubmitted = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.messageId !== "") {
            writer.uint32(10).string(message.messageId);
        }
        if (message.sender !== "") {
            writer.uint32(18).string(message.sender);
        }
        if (message.sourceChain !== "") {
            writer.uint32(26).string(message.sourceChain);
        }
        if (message.destinationChain !== "") {
            writer.uint32(34).string(message.destinationChain);
        }
        if (message.contractAddress !== "") {
            writer.uint32(42).string(message.contractAddress);
        }
        if (message.payload.length !== 0) {
            writer.uint32(50).bytes(message.payload);
        }
        if (message.payloadHash.length !== 0) {
            writer.uint32(58).bytes(message.payloadHash);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContractCallSubmitted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.messageId = reader.string();
                    break;
                case 2:
                    message.sender = reader.string();
                    break;
                case 3:
                    message.sourceChain = reader.string();
                    break;
                case 4:
                    message.destinationChain = reader.string();
                    break;
                case 5:
                    message.contractAddress = reader.string();
                    break;
                case 6:
                    message.payload = reader.bytes();
                    break;
                case 7:
                    message.payloadHash = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            messageId: isSet(object.messageId) ? String(object.messageId) : "",
            sender: isSet(object.sender) ? String(object.sender) : "",
            sourceChain: isSet(object.sourceChain) ? String(object.sourceChain) : "",
            destinationChain: isSet(object.destinationChain) ? String(object.destinationChain) : "",
            contractAddress: isSet(object.contractAddress) ? String(object.contractAddress) : "",
            payload: isSet(object.payload) ? bytesFromBase64(object.payload) : new Uint8Array(),
            payloadHash: isSet(object.payloadHash) ? bytesFromBase64(object.payloadHash) : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.messageId !== undefined && (obj.messageId = message.messageId);
        message.sender !== undefined && (obj.sender = message.sender);
        message.sourceChain !== undefined && (obj.sourceChain = message.sourceChain);
        message.destinationChain !== undefined && (obj.destinationChain = message.destinationChain);
        message.contractAddress !== undefined && (obj.contractAddress = message.contractAddress);
        message.payload !== undefined &&
            (obj.payload = base64FromBytes(message.payload !== undefined ? message.payload : new Uint8Array()));
        message.payloadHash !== undefined &&
            (obj.payloadHash = base64FromBytes(message.payloadHash !== undefined ? message.payloadHash : new Uint8Array()));
        return obj;
    },
    create(base) {
        return ContractCallSubmitted.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseContractCallSubmitted();
        message.messageId = object.messageId ?? "";
        message.sender = object.sender ?? "";
        message.sourceChain = object.sourceChain ?? "";
        message.destinationChain = object.destinationChain ?? "";
        message.contractAddress = object.contractAddress ?? "";
        message.payload = object.payload ?? new Uint8Array();
        message.payloadHash = object.payloadHash ?? new Uint8Array();
        return message;
    },
};
function createBaseContractCallWithTokenSubmitted() {
    return {
        messageId: "",
        sender: "",
        sourceChain: "",
        destinationChain: "",
        contractAddress: "",
        payload: new Uint8Array(),
        payloadHash: new Uint8Array(),
        asset: undefined,
    };
}
export const ContractCallWithTokenSubmitted = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.messageId !== "") {
            writer.uint32(10).string(message.messageId);
        }
        if (message.sender !== "") {
            writer.uint32(18).string(message.sender);
        }
        if (message.sourceChain !== "") {
            writer.uint32(26).string(message.sourceChain);
        }
        if (message.destinationChain !== "") {
            writer.uint32(34).string(message.destinationChain);
        }
        if (message.contractAddress !== "") {
            writer.uint32(42).string(message.contractAddress);
        }
        if (message.payload.length !== 0) {
            writer.uint32(50).bytes(message.payload);
        }
        if (message.payloadHash.length !== 0) {
            writer.uint32(58).bytes(message.payloadHash);
        }
        if (message.asset !== undefined) {
            Coin.encode(message.asset, writer.uint32(66).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContractCallWithTokenSubmitted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.messageId = reader.string();
                    break;
                case 2:
                    message.sender = reader.string();
                    break;
                case 3:
                    message.sourceChain = reader.string();
                    break;
                case 4:
                    message.destinationChain = reader.string();
                    break;
                case 5:
                    message.contractAddress = reader.string();
                    break;
                case 6:
                    message.payload = reader.bytes();
                    break;
                case 7:
                    message.payloadHash = reader.bytes();
                    break;
                case 8:
                    message.asset = Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            messageId: isSet(object.messageId) ? String(object.messageId) : "",
            sender: isSet(object.sender) ? String(object.sender) : "",
            sourceChain: isSet(object.sourceChain) ? String(object.sourceChain) : "",
            destinationChain: isSet(object.destinationChain) ? String(object.destinationChain) : "",
            contractAddress: isSet(object.contractAddress) ? String(object.contractAddress) : "",
            payload: isSet(object.payload) ? bytesFromBase64(object.payload) : new Uint8Array(),
            payloadHash: isSet(object.payloadHash) ? bytesFromBase64(object.payloadHash) : new Uint8Array(),
            asset: isSet(object.asset) ? Coin.fromJSON(object.asset) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.messageId !== undefined && (obj.messageId = message.messageId);
        message.sender !== undefined && (obj.sender = message.sender);
        message.sourceChain !== undefined && (obj.sourceChain = message.sourceChain);
        message.destinationChain !== undefined && (obj.destinationChain = message.destinationChain);
        message.contractAddress !== undefined && (obj.contractAddress = message.contractAddress);
        message.payload !== undefined &&
            (obj.payload = base64FromBytes(message.payload !== undefined ? message.payload : new Uint8Array()));
        message.payloadHash !== undefined &&
            (obj.payloadHash = base64FromBytes(message.payloadHash !== undefined ? message.payloadHash : new Uint8Array()));
        message.asset !== undefined && (obj.asset = message.asset ? Coin.toJSON(message.asset) : undefined);
        return obj;
    },
    create(base) {
        return ContractCallWithTokenSubmitted.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseContractCallWithTokenSubmitted();
        message.messageId = object.messageId ?? "";
        message.sender = object.sender ?? "";
        message.sourceChain = object.sourceChain ?? "";
        message.destinationChain = object.destinationChain ?? "";
        message.contractAddress = object.contractAddress ?? "";
        message.payload = object.payload ?? new Uint8Array();
        message.payloadHash = object.payloadHash ?? new Uint8Array();
        message.asset = (object.asset !== undefined && object.asset !== null) ? Coin.fromPartial(object.asset) : undefined;
        return message;
    },
};
function createBaseTokenSent() {
    return {
        transferId: Long.UZERO,
        sender: "",
        sourceChain: "",
        destinationChain: "",
        destinationAddress: "",
        asset: undefined,
    };
}
export const TokenSent = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.transferId.isZero()) {
            writer.uint32(8).uint64(message.transferId);
        }
        if (message.sender !== "") {
            writer.uint32(18).string(message.sender);
        }
        if (message.sourceChain !== "") {
            writer.uint32(26).string(message.sourceChain);
        }
        if (message.destinationChain !== "") {
            writer.uint32(34).string(message.destinationChain);
        }
        if (message.destinationAddress !== "") {
            writer.uint32(42).string(message.destinationAddress);
        }
        if (message.asset !== undefined) {
            Coin.encode(message.asset, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTokenSent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.transferId = reader.uint64();
                    break;
                case 2:
                    message.sender = reader.string();
                    break;
                case 3:
                    message.sourceChain = reader.string();
                    break;
                case 4:
                    message.destinationChain = reader.string();
                    break;
                case 5:
                    message.destinationAddress = reader.string();
                    break;
                case 6:
                    message.asset = Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            transferId: isSet(object.transferId) ? Long.fromValue(object.transferId) : Long.UZERO,
            sender: isSet(object.sender) ? String(object.sender) : "",
            sourceChain: isSet(object.sourceChain) ? String(object.sourceChain) : "",
            destinationChain: isSet(object.destinationChain) ? String(object.destinationChain) : "",
            destinationAddress: isSet(object.destinationAddress) ? String(object.destinationAddress) : "",
            asset: isSet(object.asset) ? Coin.fromJSON(object.asset) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.transferId !== undefined && (obj.transferId = (message.transferId || Long.UZERO).toString());
        message.sender !== undefined && (obj.sender = message.sender);
        message.sourceChain !== undefined && (obj.sourceChain = message.sourceChain);
        message.destinationChain !== undefined && (obj.destinationChain = message.destinationChain);
        message.destinationAddress !== undefined && (obj.destinationAddress = message.destinationAddress);
        message.asset !== undefined && (obj.asset = message.asset ? Coin.toJSON(message.asset) : undefined);
        return obj;
    },
    create(base) {
        return TokenSent.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTokenSent();
        message.transferId = (object.transferId !== undefined && object.transferId !== null)
            ? Long.fromValue(object.transferId)
            : Long.UZERO;
        message.sender = object.sender ?? "";
        message.sourceChain = object.sourceChain ?? "";
        message.destinationChain = object.destinationChain ?? "";
        message.destinationAddress = object.destinationAddress ?? "";
        message.asset = (object.asset !== undefined && object.asset !== null) ? Coin.fromPartial(object.asset) : undefined;
        return message;
    },
};
var tsProtoGlobalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (tsProtoGlobalThis.Buffer) {
        return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = tsProtoGlobalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (tsProtoGlobalThis.Buffer) {
        return tsProtoGlobalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return tsProtoGlobalThis.btoa(bin.join(""));
    }
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
