/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Params } from "./params";
import { Key, KeyEpoch, KeygenSession, SigningSession } from "./types";
export const protobufPackage = "axelar.multisig.v1beta1";
function createBaseGenesisState() {
    return { params: undefined, keygenSessions: [], signingSessions: [], keys: [], keyEpochs: [] };
}
export const GenesisState = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.params !== undefined) {
            Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.keygenSessions) {
            KeygenSession.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.signingSessions) {
            SigningSession.encode(v, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.keys) {
            Key.encode(v, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.keyEpochs) {
            KeyEpoch.encode(v, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = Params.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.keygenSessions.push(KeygenSession.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.signingSessions.push(SigningSession.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.keys.push(Key.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.keyEpochs.push(KeyEpoch.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
            keygenSessions: Array.isArray(object?.keygenSessions)
                ? object.keygenSessions.map((e) => KeygenSession.fromJSON(e))
                : [],
            signingSessions: Array.isArray(object?.signingSessions)
                ? object.signingSessions.map((e) => SigningSession.fromJSON(e))
                : [],
            keys: Array.isArray(object?.keys) ? object.keys.map((e) => Key.fromJSON(e)) : [],
            keyEpochs: Array.isArray(object?.keyEpochs) ? object.keyEpochs.map((e) => KeyEpoch.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? Params.toJSON(message.params) : undefined);
        if (message.keygenSessions) {
            obj.keygenSessions = message.keygenSessions.map((e) => e ? KeygenSession.toJSON(e) : undefined);
        }
        else {
            obj.keygenSessions = [];
        }
        if (message.signingSessions) {
            obj.signingSessions = message.signingSessions.map((e) => e ? SigningSession.toJSON(e) : undefined);
        }
        else {
            obj.signingSessions = [];
        }
        if (message.keys) {
            obj.keys = message.keys.map((e) => e ? Key.toJSON(e) : undefined);
        }
        else {
            obj.keys = [];
        }
        if (message.keyEpochs) {
            obj.keyEpochs = message.keyEpochs.map((e) => e ? KeyEpoch.toJSON(e) : undefined);
        }
        else {
            obj.keyEpochs = [];
        }
        return obj;
    },
    create(base) {
        return GenesisState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenesisState();
        message.params = (object.params !== undefined && object.params !== null)
            ? Params.fromPartial(object.params)
            : undefined;
        message.keygenSessions = object.keygenSessions?.map((e) => KeygenSession.fromPartial(e)) || [];
        message.signingSessions = object.signingSessions?.map((e) => SigningSession.fromPartial(e)) || [];
        message.keys = object.keys?.map((e) => Key.fromPartial(e)) || [];
        message.keyEpochs = object.keyEpochs?.map((e) => KeyEpoch.fromPartial(e)) || [];
        return message;
    },
};
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
