/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
export const protobufPackage = "axelar.multisig.v1beta1";
function createBaseKeygenStarted() {
    return { module: "", keyId: "", participants: [] };
}
export const KeygenStarted = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.module !== "") {
            writer.uint32(10).string(message.module);
        }
        if (message.keyId !== "") {
            writer.uint32(18).string(message.keyId);
        }
        for (const v of message.participants) {
            writer.uint32(26).bytes(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseKeygenStarted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.module = reader.string();
                    break;
                case 2:
                    message.keyId = reader.string();
                    break;
                case 3:
                    message.participants.push(reader.bytes());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            module: isSet(object.module) ? String(object.module) : "",
            keyId: isSet(object.keyId) ? String(object.keyId) : "",
            participants: Array.isArray(object?.participants) ? object.participants.map((e) => bytesFromBase64(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.module !== undefined && (obj.module = message.module);
        message.keyId !== undefined && (obj.keyId = message.keyId);
        if (message.participants) {
            obj.participants = message.participants.map((e) => base64FromBytes(e !== undefined ? e : new Uint8Array()));
        }
        else {
            obj.participants = [];
        }
        return obj;
    },
    create(base) {
        return KeygenStarted.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseKeygenStarted();
        message.module = object.module ?? "";
        message.keyId = object.keyId ?? "";
        message.participants = object.participants?.map((e) => e) || [];
        return message;
    },
};
function createBaseKeygenCompleted() {
    return { module: "", keyId: "" };
}
export const KeygenCompleted = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.module !== "") {
            writer.uint32(10).string(message.module);
        }
        if (message.keyId !== "") {
            writer.uint32(18).string(message.keyId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseKeygenCompleted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.module = reader.string();
                    break;
                case 2:
                    message.keyId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            module: isSet(object.module) ? String(object.module) : "",
            keyId: isSet(object.keyId) ? String(object.keyId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.module !== undefined && (obj.module = message.module);
        message.keyId !== undefined && (obj.keyId = message.keyId);
        return obj;
    },
    create(base) {
        return KeygenCompleted.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseKeygenCompleted();
        message.module = object.module ?? "";
        message.keyId = object.keyId ?? "";
        return message;
    },
};
function createBaseKeygenExpired() {
    return { module: "", keyId: "" };
}
export const KeygenExpired = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.module !== "") {
            writer.uint32(10).string(message.module);
        }
        if (message.keyId !== "") {
            writer.uint32(18).string(message.keyId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseKeygenExpired();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.module = reader.string();
                    break;
                case 2:
                    message.keyId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            module: isSet(object.module) ? String(object.module) : "",
            keyId: isSet(object.keyId) ? String(object.keyId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.module !== undefined && (obj.module = message.module);
        message.keyId !== undefined && (obj.keyId = message.keyId);
        return obj;
    },
    create(base) {
        return KeygenExpired.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseKeygenExpired();
        message.module = object.module ?? "";
        message.keyId = object.keyId ?? "";
        return message;
    },
};
function createBasePubKeySubmitted() {
    return { module: "", keyId: "", participant: new Uint8Array(), pubKey: new Uint8Array() };
}
export const PubKeySubmitted = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.module !== "") {
            writer.uint32(10).string(message.module);
        }
        if (message.keyId !== "") {
            writer.uint32(18).string(message.keyId);
        }
        if (message.participant.length !== 0) {
            writer.uint32(26).bytes(message.participant);
        }
        if (message.pubKey.length !== 0) {
            writer.uint32(34).bytes(message.pubKey);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePubKeySubmitted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.module = reader.string();
                    break;
                case 2:
                    message.keyId = reader.string();
                    break;
                case 3:
                    message.participant = reader.bytes();
                    break;
                case 4:
                    message.pubKey = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            module: isSet(object.module) ? String(object.module) : "",
            keyId: isSet(object.keyId) ? String(object.keyId) : "",
            participant: isSet(object.participant) ? bytesFromBase64(object.participant) : new Uint8Array(),
            pubKey: isSet(object.pubKey) ? bytesFromBase64(object.pubKey) : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.module !== undefined && (obj.module = message.module);
        message.keyId !== undefined && (obj.keyId = message.keyId);
        message.participant !== undefined &&
            (obj.participant = base64FromBytes(message.participant !== undefined ? message.participant : new Uint8Array()));
        message.pubKey !== undefined &&
            (obj.pubKey = base64FromBytes(message.pubKey !== undefined ? message.pubKey : new Uint8Array()));
        return obj;
    },
    create(base) {
        return PubKeySubmitted.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePubKeySubmitted();
        message.module = object.module ?? "";
        message.keyId = object.keyId ?? "";
        message.participant = object.participant ?? new Uint8Array();
        message.pubKey = object.pubKey ?? new Uint8Array();
        return message;
    },
};
function createBaseSigningStarted() {
    return { module: "", sigId: Long.UZERO, keyId: "", pubKeys: {}, payloadHash: new Uint8Array(), requestingModule: "" };
}
export const SigningStarted = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.module !== "") {
            writer.uint32(10).string(message.module);
        }
        if (!message.sigId.isZero()) {
            writer.uint32(16).uint64(message.sigId);
        }
        if (message.keyId !== "") {
            writer.uint32(26).string(message.keyId);
        }
        Object.entries(message.pubKeys).forEach(([key, value]) => {
            SigningStarted_PubKeysEntry.encode({ key: key, value }, writer.uint32(34).fork()).ldelim();
        });
        if (message.payloadHash.length !== 0) {
            writer.uint32(42).bytes(message.payloadHash);
        }
        if (message.requestingModule !== "") {
            writer.uint32(50).string(message.requestingModule);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSigningStarted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.module = reader.string();
                    break;
                case 2:
                    message.sigId = reader.uint64();
                    break;
                case 3:
                    message.keyId = reader.string();
                    break;
                case 4:
                    const entry4 = SigningStarted_PubKeysEntry.decode(reader, reader.uint32());
                    if (entry4.value !== undefined) {
                        message.pubKeys[entry4.key] = entry4.value;
                    }
                    break;
                case 5:
                    message.payloadHash = reader.bytes();
                    break;
                case 6:
                    message.requestingModule = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            module: isSet(object.module) ? String(object.module) : "",
            sigId: isSet(object.sigId) ? Long.fromValue(object.sigId) : Long.UZERO,
            keyId: isSet(object.keyId) ? String(object.keyId) : "",
            pubKeys: isObject(object.pubKeys)
                ? Object.entries(object.pubKeys).reduce((acc, [key, value]) => {
                    acc[key] = bytesFromBase64(value);
                    return acc;
                }, {})
                : {},
            payloadHash: isSet(object.payloadHash) ? bytesFromBase64(object.payloadHash) : new Uint8Array(),
            requestingModule: isSet(object.requestingModule) ? String(object.requestingModule) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.module !== undefined && (obj.module = message.module);
        message.sigId !== undefined && (obj.sigId = (message.sigId || Long.UZERO).toString());
        message.keyId !== undefined && (obj.keyId = message.keyId);
        obj.pubKeys = {};
        if (message.pubKeys) {
            Object.entries(message.pubKeys).forEach(([k, v]) => {
                obj.pubKeys[k] = base64FromBytes(v);
            });
        }
        message.payloadHash !== undefined &&
            (obj.payloadHash = base64FromBytes(message.payloadHash !== undefined ? message.payloadHash : new Uint8Array()));
        message.requestingModule !== undefined && (obj.requestingModule = message.requestingModule);
        return obj;
    },
    create(base) {
        return SigningStarted.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSigningStarted();
        message.module = object.module ?? "";
        message.sigId = (object.sigId !== undefined && object.sigId !== null) ? Long.fromValue(object.sigId) : Long.UZERO;
        message.keyId = object.keyId ?? "";
        message.pubKeys = Object.entries(object.pubKeys ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = value;
            }
            return acc;
        }, {});
        message.payloadHash = object.payloadHash ?? new Uint8Array();
        message.requestingModule = object.requestingModule ?? "";
        return message;
    },
};
function createBaseSigningStarted_PubKeysEntry() {
    return { key: "", value: new Uint8Array() };
}
export const SigningStarted_PubKeysEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value.length !== 0) {
            writer.uint32(18).bytes(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSigningStarted_PubKeysEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined &&
            (obj.value = base64FromBytes(message.value !== undefined ? message.value : new Uint8Array()));
        return obj;
    },
    create(base) {
        return SigningStarted_PubKeysEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSigningStarted_PubKeysEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? new Uint8Array();
        return message;
    },
};
function createBaseSigningCompleted() {
    return { module: "", sigId: Long.UZERO };
}
export const SigningCompleted = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.module !== "") {
            writer.uint32(10).string(message.module);
        }
        if (!message.sigId.isZero()) {
            writer.uint32(16).uint64(message.sigId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSigningCompleted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.module = reader.string();
                    break;
                case 2:
                    message.sigId = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            module: isSet(object.module) ? String(object.module) : "",
            sigId: isSet(object.sigId) ? Long.fromValue(object.sigId) : Long.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.module !== undefined && (obj.module = message.module);
        message.sigId !== undefined && (obj.sigId = (message.sigId || Long.UZERO).toString());
        return obj;
    },
    create(base) {
        return SigningCompleted.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSigningCompleted();
        message.module = object.module ?? "";
        message.sigId = (object.sigId !== undefined && object.sigId !== null) ? Long.fromValue(object.sigId) : Long.UZERO;
        return message;
    },
};
function createBaseSigningExpired() {
    return { module: "", sigId: Long.UZERO };
}
export const SigningExpired = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.module !== "") {
            writer.uint32(10).string(message.module);
        }
        if (!message.sigId.isZero()) {
            writer.uint32(16).uint64(message.sigId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSigningExpired();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.module = reader.string();
                    break;
                case 2:
                    message.sigId = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            module: isSet(object.module) ? String(object.module) : "",
            sigId: isSet(object.sigId) ? Long.fromValue(object.sigId) : Long.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.module !== undefined && (obj.module = message.module);
        message.sigId !== undefined && (obj.sigId = (message.sigId || Long.UZERO).toString());
        return obj;
    },
    create(base) {
        return SigningExpired.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSigningExpired();
        message.module = object.module ?? "";
        message.sigId = (object.sigId !== undefined && object.sigId !== null) ? Long.fromValue(object.sigId) : Long.UZERO;
        return message;
    },
};
function createBaseSignatureSubmitted() {
    return { module: "", sigId: Long.UZERO, participant: new Uint8Array(), signature: new Uint8Array() };
}
export const SignatureSubmitted = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.module !== "") {
            writer.uint32(10).string(message.module);
        }
        if (!message.sigId.isZero()) {
            writer.uint32(16).uint64(message.sigId);
        }
        if (message.participant.length !== 0) {
            writer.uint32(26).bytes(message.participant);
        }
        if (message.signature.length !== 0) {
            writer.uint32(34).bytes(message.signature);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSignatureSubmitted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.module = reader.string();
                    break;
                case 2:
                    message.sigId = reader.uint64();
                    break;
                case 3:
                    message.participant = reader.bytes();
                    break;
                case 4:
                    message.signature = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            module: isSet(object.module) ? String(object.module) : "",
            sigId: isSet(object.sigId) ? Long.fromValue(object.sigId) : Long.UZERO,
            participant: isSet(object.participant) ? bytesFromBase64(object.participant) : new Uint8Array(),
            signature: isSet(object.signature) ? bytesFromBase64(object.signature) : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.module !== undefined && (obj.module = message.module);
        message.sigId !== undefined && (obj.sigId = (message.sigId || Long.UZERO).toString());
        message.participant !== undefined &&
            (obj.participant = base64FromBytes(message.participant !== undefined ? message.participant : new Uint8Array()));
        message.signature !== undefined &&
            (obj.signature = base64FromBytes(message.signature !== undefined ? message.signature : new Uint8Array()));
        return obj;
    },
    create(base) {
        return SignatureSubmitted.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSignatureSubmitted();
        message.module = object.module ?? "";
        message.sigId = (object.sigId !== undefined && object.sigId !== null) ? Long.fromValue(object.sigId) : Long.UZERO;
        message.participant = object.participant ?? new Uint8Array();
        message.signature = object.signature ?? new Uint8Array();
        return message;
    },
};
function createBaseKeyAssigned() {
    return { module: "", chain: "", keyId: "" };
}
export const KeyAssigned = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.module !== "") {
            writer.uint32(10).string(message.module);
        }
        if (message.chain !== "") {
            writer.uint32(18).string(message.chain);
        }
        if (message.keyId !== "") {
            writer.uint32(26).string(message.keyId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseKeyAssigned();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.module = reader.string();
                    break;
                case 2:
                    message.chain = reader.string();
                    break;
                case 3:
                    message.keyId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            module: isSet(object.module) ? String(object.module) : "",
            chain: isSet(object.chain) ? String(object.chain) : "",
            keyId: isSet(object.keyId) ? String(object.keyId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.module !== undefined && (obj.module = message.module);
        message.chain !== undefined && (obj.chain = message.chain);
        message.keyId !== undefined && (obj.keyId = message.keyId);
        return obj;
    },
    create(base) {
        return KeyAssigned.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseKeyAssigned();
        message.module = object.module ?? "";
        message.chain = object.chain ?? "";
        message.keyId = object.keyId ?? "";
        return message;
    },
};
function createBaseKeyRotated() {
    return { module: "", chain: "", keyId: "" };
}
export const KeyRotated = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.module !== "") {
            writer.uint32(10).string(message.module);
        }
        if (message.chain !== "") {
            writer.uint32(18).string(message.chain);
        }
        if (message.keyId !== "") {
            writer.uint32(26).string(message.keyId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseKeyRotated();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.module = reader.string();
                    break;
                case 2:
                    message.chain = reader.string();
                    break;
                case 3:
                    message.keyId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            module: isSet(object.module) ? String(object.module) : "",
            chain: isSet(object.chain) ? String(object.chain) : "",
            keyId: isSet(object.keyId) ? String(object.keyId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.module !== undefined && (obj.module = message.module);
        message.chain !== undefined && (obj.chain = message.chain);
        message.keyId !== undefined && (obj.keyId = message.keyId);
        return obj;
    },
    create(base) {
        return KeyRotated.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseKeyRotated();
        message.module = object.module ?? "";
        message.chain = object.chain ?? "";
        message.keyId = object.keyId ?? "";
        return message;
    },
};
function createBaseKeygenOptOut() {
    return { participant: new Uint8Array() };
}
export const KeygenOptOut = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.participant.length !== 0) {
            writer.uint32(10).bytes(message.participant);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseKeygenOptOut();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.participant = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { participant: isSet(object.participant) ? bytesFromBase64(object.participant) : new Uint8Array() };
    },
    toJSON(message) {
        const obj = {};
        message.participant !== undefined &&
            (obj.participant = base64FromBytes(message.participant !== undefined ? message.participant : new Uint8Array()));
        return obj;
    },
    create(base) {
        return KeygenOptOut.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseKeygenOptOut();
        message.participant = object.participant ?? new Uint8Array();
        return message;
    },
};
function createBaseKeygenOptIn() {
    return { participant: new Uint8Array() };
}
export const KeygenOptIn = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.participant.length !== 0) {
            writer.uint32(10).bytes(message.participant);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseKeygenOptIn();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.participant = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { participant: isSet(object.participant) ? bytesFromBase64(object.participant) : new Uint8Array() };
    },
    toJSON(message) {
        const obj = {};
        message.participant !== undefined &&
            (obj.participant = base64FromBytes(message.participant !== undefined ? message.participant : new Uint8Array()));
        return obj;
    },
    create(base) {
        return KeygenOptIn.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseKeygenOptIn();
        message.participant = object.participant ?? new Uint8Array();
        return message;
    },
};
var tsProtoGlobalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (tsProtoGlobalThis.Buffer) {
        return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = tsProtoGlobalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (tsProtoGlobalThis.Buffer) {
        return tsProtoGlobalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return tsProtoGlobalThis.btoa(bin.join(""));
    }
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
