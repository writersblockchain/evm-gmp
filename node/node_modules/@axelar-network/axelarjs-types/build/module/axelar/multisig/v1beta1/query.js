/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { keyStateFromJSON, keyStateToJSON, multisigStateFromJSON, multisigStateToJSON, } from "../exported/v1beta1/types";
export const protobufPackage = "axelar.multisig.v1beta1";
function createBaseKeyIDRequest() {
    return { chain: "" };
}
export const KeyIDRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.chain !== "") {
            writer.uint32(10).string(message.chain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseKeyIDRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chain = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { chain: isSet(object.chain) ? String(object.chain) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.chain !== undefined && (obj.chain = message.chain);
        return obj;
    },
    create(base) {
        return KeyIDRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseKeyIDRequest();
        message.chain = object.chain ?? "";
        return message;
    },
};
function createBaseKeyIDResponse() {
    return { keyId: "" };
}
export const KeyIDResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.keyId !== "") {
            writer.uint32(10).string(message.keyId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseKeyIDResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.keyId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { keyId: isSet(object.keyId) ? String(object.keyId) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.keyId !== undefined && (obj.keyId = message.keyId);
        return obj;
    },
    create(base) {
        return KeyIDResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseKeyIDResponse();
        message.keyId = object.keyId ?? "";
        return message;
    },
};
function createBaseNextKeyIDRequest() {
    return { chain: "" };
}
export const NextKeyIDRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.chain !== "") {
            writer.uint32(10).string(message.chain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNextKeyIDRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chain = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { chain: isSet(object.chain) ? String(object.chain) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.chain !== undefined && (obj.chain = message.chain);
        return obj;
    },
    create(base) {
        return NextKeyIDRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseNextKeyIDRequest();
        message.chain = object.chain ?? "";
        return message;
    },
};
function createBaseNextKeyIDResponse() {
    return { keyId: "" };
}
export const NextKeyIDResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.keyId !== "") {
            writer.uint32(10).string(message.keyId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNextKeyIDResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.keyId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { keyId: isSet(object.keyId) ? String(object.keyId) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.keyId !== undefined && (obj.keyId = message.keyId);
        return obj;
    },
    create(base) {
        return NextKeyIDResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseNextKeyIDResponse();
        message.keyId = object.keyId ?? "";
        return message;
    },
};
function createBaseKeyRequest() {
    return { keyId: "" };
}
export const KeyRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.keyId !== "") {
            writer.uint32(10).string(message.keyId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseKeyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.keyId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { keyId: isSet(object.keyId) ? String(object.keyId) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.keyId !== undefined && (obj.keyId = message.keyId);
        return obj;
    },
    create(base) {
        return KeyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseKeyRequest();
        message.keyId = object.keyId ?? "";
        return message;
    },
};
function createBaseKeygenParticipant() {
    return { address: "", weight: new Uint8Array(), pubKey: "" };
}
export const KeygenParticipant = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.weight.length !== 0) {
            writer.uint32(18).bytes(message.weight);
        }
        if (message.pubKey !== "") {
            writer.uint32(26).string(message.pubKey);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseKeygenParticipant();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.address = reader.string();
                    break;
                case 2:
                    message.weight = reader.bytes();
                    break;
                case 3:
                    message.pubKey = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? String(object.address) : "",
            weight: isSet(object.weight) ? bytesFromBase64(object.weight) : new Uint8Array(),
            pubKey: isSet(object.pubKey) ? String(object.pubKey) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.address !== undefined && (obj.address = message.address);
        message.weight !== undefined &&
            (obj.weight = base64FromBytes(message.weight !== undefined ? message.weight : new Uint8Array()));
        message.pubKey !== undefined && (obj.pubKey = message.pubKey);
        return obj;
    },
    create(base) {
        return KeygenParticipant.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseKeygenParticipant();
        message.address = object.address ?? "";
        message.weight = object.weight ?? new Uint8Array();
        message.pubKey = object.pubKey ?? "";
        return message;
    },
};
function createBaseKeyResponse() {
    return {
        keyId: "",
        state: 0,
        startedAt: Long.ZERO,
        startedAtTimestamp: undefined,
        thresholdWeight: new Uint8Array(),
        bondedWeight: new Uint8Array(),
        participants: [],
    };
}
export const KeyResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.keyId !== "") {
            writer.uint32(10).string(message.keyId);
        }
        if (message.state !== 0) {
            writer.uint32(16).int32(message.state);
        }
        if (!message.startedAt.isZero()) {
            writer.uint32(24).int64(message.startedAt);
        }
        if (message.startedAtTimestamp !== undefined) {
            Timestamp.encode(toTimestamp(message.startedAtTimestamp), writer.uint32(34).fork()).ldelim();
        }
        if (message.thresholdWeight.length !== 0) {
            writer.uint32(42).bytes(message.thresholdWeight);
        }
        if (message.bondedWeight.length !== 0) {
            writer.uint32(50).bytes(message.bondedWeight);
        }
        for (const v of message.participants) {
            KeygenParticipant.encode(v, writer.uint32(58).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseKeyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.keyId = reader.string();
                    break;
                case 2:
                    message.state = reader.int32();
                    break;
                case 3:
                    message.startedAt = reader.int64();
                    break;
                case 4:
                    message.startedAtTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.thresholdWeight = reader.bytes();
                    break;
                case 6:
                    message.bondedWeight = reader.bytes();
                    break;
                case 7:
                    message.participants.push(KeygenParticipant.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            keyId: isSet(object.keyId) ? String(object.keyId) : "",
            state: isSet(object.state) ? keyStateFromJSON(object.state) : 0,
            startedAt: isSet(object.startedAt) ? Long.fromValue(object.startedAt) : Long.ZERO,
            startedAtTimestamp: isSet(object.startedAtTimestamp) ? fromJsonTimestamp(object.startedAtTimestamp) : undefined,
            thresholdWeight: isSet(object.thresholdWeight) ? bytesFromBase64(object.thresholdWeight) : new Uint8Array(),
            bondedWeight: isSet(object.bondedWeight) ? bytesFromBase64(object.bondedWeight) : new Uint8Array(),
            participants: Array.isArray(object?.participants)
                ? object.participants.map((e) => KeygenParticipant.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.keyId !== undefined && (obj.keyId = message.keyId);
        message.state !== undefined && (obj.state = keyStateToJSON(message.state));
        message.startedAt !== undefined && (obj.startedAt = (message.startedAt || Long.ZERO).toString());
        message.startedAtTimestamp !== undefined && (obj.startedAtTimestamp = message.startedAtTimestamp.toISOString());
        message.thresholdWeight !== undefined &&
            (obj.thresholdWeight = base64FromBytes(message.thresholdWeight !== undefined ? message.thresholdWeight : new Uint8Array()));
        message.bondedWeight !== undefined &&
            (obj.bondedWeight = base64FromBytes(message.bondedWeight !== undefined ? message.bondedWeight : new Uint8Array()));
        if (message.participants) {
            obj.participants = message.participants.map((e) => e ? KeygenParticipant.toJSON(e) : undefined);
        }
        else {
            obj.participants = [];
        }
        return obj;
    },
    create(base) {
        return KeyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseKeyResponse();
        message.keyId = object.keyId ?? "";
        message.state = object.state ?? 0;
        message.startedAt = (object.startedAt !== undefined && object.startedAt !== null)
            ? Long.fromValue(object.startedAt)
            : Long.ZERO;
        message.startedAtTimestamp = object.startedAtTimestamp ?? undefined;
        message.thresholdWeight = object.thresholdWeight ?? new Uint8Array();
        message.bondedWeight = object.bondedWeight ?? new Uint8Array();
        message.participants = object.participants?.map((e) => KeygenParticipant.fromPartial(e)) || [];
        return message;
    },
};
function createBaseKeygenSessionRequest() {
    return { keyId: "" };
}
export const KeygenSessionRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.keyId !== "") {
            writer.uint32(10).string(message.keyId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseKeygenSessionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.keyId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return { keyId: isSet(object.keyId) ? String(object.keyId) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.keyId !== undefined && (obj.keyId = message.keyId);
        return obj;
    },
    create(base) {
        return KeygenSessionRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseKeygenSessionRequest();
        message.keyId = object.keyId ?? "";
        return message;
    },
};
function createBaseKeygenSessionResponse() {
    return {
        startedAt: Long.ZERO,
        startedAtTimestamp: undefined,
        expiresAt: Long.ZERO,
        completedAt: Long.ZERO,
        gracePeriod: Long.ZERO,
        state: 0,
        keygenThresholdWeight: new Uint8Array(),
        signingThresholdWeight: new Uint8Array(),
        bondedWeight: new Uint8Array(),
        participants: [],
    };
}
export const KeygenSessionResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.startedAt.isZero()) {
            writer.uint32(8).int64(message.startedAt);
        }
        if (message.startedAtTimestamp !== undefined) {
            Timestamp.encode(toTimestamp(message.startedAtTimestamp), writer.uint32(18).fork()).ldelim();
        }
        if (!message.expiresAt.isZero()) {
            writer.uint32(24).int64(message.expiresAt);
        }
        if (!message.completedAt.isZero()) {
            writer.uint32(32).int64(message.completedAt);
        }
        if (!message.gracePeriod.isZero()) {
            writer.uint32(40).int64(message.gracePeriod);
        }
        if (message.state !== 0) {
            writer.uint32(48).int32(message.state);
        }
        if (message.keygenThresholdWeight.length !== 0) {
            writer.uint32(58).bytes(message.keygenThresholdWeight);
        }
        if (message.signingThresholdWeight.length !== 0) {
            writer.uint32(66).bytes(message.signingThresholdWeight);
        }
        if (message.bondedWeight.length !== 0) {
            writer.uint32(74).bytes(message.bondedWeight);
        }
        for (const v of message.participants) {
            KeygenParticipant.encode(v, writer.uint32(82).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseKeygenSessionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.startedAt = reader.int64();
                    break;
                case 2:
                    message.startedAtTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.expiresAt = reader.int64();
                    break;
                case 4:
                    message.completedAt = reader.int64();
                    break;
                case 5:
                    message.gracePeriod = reader.int64();
                    break;
                case 6:
                    message.state = reader.int32();
                    break;
                case 7:
                    message.keygenThresholdWeight = reader.bytes();
                    break;
                case 8:
                    message.signingThresholdWeight = reader.bytes();
                    break;
                case 9:
                    message.bondedWeight = reader.bytes();
                    break;
                case 10:
                    message.participants.push(KeygenParticipant.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            startedAt: isSet(object.startedAt) ? Long.fromValue(object.startedAt) : Long.ZERO,
            startedAtTimestamp: isSet(object.startedAtTimestamp) ? fromJsonTimestamp(object.startedAtTimestamp) : undefined,
            expiresAt: isSet(object.expiresAt) ? Long.fromValue(object.expiresAt) : Long.ZERO,
            completedAt: isSet(object.completedAt) ? Long.fromValue(object.completedAt) : Long.ZERO,
            gracePeriod: isSet(object.gracePeriod) ? Long.fromValue(object.gracePeriod) : Long.ZERO,
            state: isSet(object.state) ? multisigStateFromJSON(object.state) : 0,
            keygenThresholdWeight: isSet(object.keygenThresholdWeight)
                ? bytesFromBase64(object.keygenThresholdWeight)
                : new Uint8Array(),
            signingThresholdWeight: isSet(object.signingThresholdWeight)
                ? bytesFromBase64(object.signingThresholdWeight)
                : new Uint8Array(),
            bondedWeight: isSet(object.bondedWeight) ? bytesFromBase64(object.bondedWeight) : new Uint8Array(),
            participants: Array.isArray(object?.participants)
                ? object.participants.map((e) => KeygenParticipant.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.startedAt !== undefined && (obj.startedAt = (message.startedAt || Long.ZERO).toString());
        message.startedAtTimestamp !== undefined && (obj.startedAtTimestamp = message.startedAtTimestamp.toISOString());
        message.expiresAt !== undefined && (obj.expiresAt = (message.expiresAt || Long.ZERO).toString());
        message.completedAt !== undefined && (obj.completedAt = (message.completedAt || Long.ZERO).toString());
        message.gracePeriod !== undefined && (obj.gracePeriod = (message.gracePeriod || Long.ZERO).toString());
        message.state !== undefined && (obj.state = multisigStateToJSON(message.state));
        message.keygenThresholdWeight !== undefined &&
            (obj.keygenThresholdWeight = base64FromBytes(message.keygenThresholdWeight !== undefined ? message.keygenThresholdWeight : new Uint8Array()));
        message.signingThresholdWeight !== undefined &&
            (obj.signingThresholdWeight = base64FromBytes(message.signingThresholdWeight !== undefined ? message.signingThresholdWeight : new Uint8Array()));
        message.bondedWeight !== undefined &&
            (obj.bondedWeight = base64FromBytes(message.bondedWeight !== undefined ? message.bondedWeight : new Uint8Array()));
        if (message.participants) {
            obj.participants = message.participants.map((e) => e ? KeygenParticipant.toJSON(e) : undefined);
        }
        else {
            obj.participants = [];
        }
        return obj;
    },
    create(base) {
        return KeygenSessionResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseKeygenSessionResponse();
        message.startedAt = (object.startedAt !== undefined && object.startedAt !== null)
            ? Long.fromValue(object.startedAt)
            : Long.ZERO;
        message.startedAtTimestamp = object.startedAtTimestamp ?? undefined;
        message.expiresAt = (object.expiresAt !== undefined && object.expiresAt !== null)
            ? Long.fromValue(object.expiresAt)
            : Long.ZERO;
        message.completedAt = (object.completedAt !== undefined && object.completedAt !== null)
            ? Long.fromValue(object.completedAt)
            : Long.ZERO;
        message.gracePeriod = (object.gracePeriod !== undefined && object.gracePeriod !== null)
            ? Long.fromValue(object.gracePeriod)
            : Long.ZERO;
        message.state = object.state ?? 0;
        message.keygenThresholdWeight = object.keygenThresholdWeight ?? new Uint8Array();
        message.signingThresholdWeight = object.signingThresholdWeight ?? new Uint8Array();
        message.bondedWeight = object.bondedWeight ?? new Uint8Array();
        message.participants = object.participants?.map((e) => KeygenParticipant.fromPartial(e)) || [];
        return message;
    },
};
var tsProtoGlobalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (tsProtoGlobalThis.Buffer) {
        return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = tsProtoGlobalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (tsProtoGlobalThis.Buffer) {
        return tsProtoGlobalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(String.fromCharCode(byte));
        });
        return tsProtoGlobalThis.btoa(bin.join(""));
    }
}
function toTimestamp(date) {
    const seconds = numberToLong(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = t.seconds.toNumber() * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function numberToLong(number) {
    return Long.fromNumber(number);
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
