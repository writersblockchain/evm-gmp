/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { KeygenSessionRequest, KeygenSessionResponse, KeyIDRequest, KeyIDResponse, KeyRequest, KeyResponse, NextKeyIDRequest, NextKeyIDResponse, } from "./query";
import { KeygenOptInRequest, KeygenOptInResponse, KeygenOptOutRequest, KeygenOptOutResponse, RotateKeyRequest, RotateKeyResponse, StartKeygenRequest, StartKeygenResponse, SubmitPubKeyRequest, SubmitPubKeyResponse, SubmitSignatureRequest, SubmitSignatureResponse, } from "./tx";
export const protobufPackage = "axelar.multisig.v1beta1";
export class MsgServiceClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "axelar.multisig.v1beta1.MsgService";
        this.rpc = rpc;
        this.StartKeygen = this.StartKeygen.bind(this);
        this.SubmitPubKey = this.SubmitPubKey.bind(this);
        this.SubmitSignature = this.SubmitSignature.bind(this);
        this.RotateKey = this.RotateKey.bind(this);
        this.KeygenOptOut = this.KeygenOptOut.bind(this);
        this.KeygenOptIn = this.KeygenOptIn.bind(this);
    }
    StartKeygen(request) {
        const data = StartKeygenRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "StartKeygen", data);
        return promise.then((data) => StartKeygenResponse.decode(new _m0.Reader(data)));
    }
    SubmitPubKey(request) {
        const data = SubmitPubKeyRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "SubmitPubKey", data);
        return promise.then((data) => SubmitPubKeyResponse.decode(new _m0.Reader(data)));
    }
    SubmitSignature(request) {
        const data = SubmitSignatureRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "SubmitSignature", data);
        return promise.then((data) => SubmitSignatureResponse.decode(new _m0.Reader(data)));
    }
    RotateKey(request) {
        const data = RotateKeyRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RotateKey", data);
        return promise.then((data) => RotateKeyResponse.decode(new _m0.Reader(data)));
    }
    KeygenOptOut(request) {
        const data = KeygenOptOutRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "KeygenOptOut", data);
        return promise.then((data) => KeygenOptOutResponse.decode(new _m0.Reader(data)));
    }
    KeygenOptIn(request) {
        const data = KeygenOptInRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "KeygenOptIn", data);
        return promise.then((data) => KeygenOptInResponse.decode(new _m0.Reader(data)));
    }
}
export class QueryServiceClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || "axelar.multisig.v1beta1.QueryService";
        this.rpc = rpc;
        this.KeyID = this.KeyID.bind(this);
        this.NextKeyID = this.NextKeyID.bind(this);
        this.Key = this.Key.bind(this);
        this.KeygenSession = this.KeygenSession.bind(this);
    }
    KeyID(request) {
        const data = KeyIDRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "KeyID", data);
        return promise.then((data) => KeyIDResponse.decode(new _m0.Reader(data)));
    }
    NextKeyID(request) {
        const data = NextKeyIDRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "NextKeyID", data);
        return promise.then((data) => NextKeyIDResponse.decode(new _m0.Reader(data)));
    }
    Key(request) {
        const data = KeyRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Key", data);
        return promise.then((data) => KeyResponse.decode(new _m0.Reader(data)));
    }
    KeygenSession(request) {
        const data = KeygenSessionRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "KeygenSession", data);
        return promise.then((data) => KeygenSessionResponse.decode(new _m0.Reader(data)));
    }
}
